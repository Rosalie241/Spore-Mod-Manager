//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:/Linux/projects/Spore-Mod-Manager/SporeMods.Core/ArgScript\ArgScript.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class ArgScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, STRING=27, UnterminatedStringLiteral=28, ID=29, EOL=30, 
		COMMENT=31, OPTION=32, INTEGER=33, FLOAT=34, WS=35, INDENT=36, DEDENT=37;
	public const int
		RULE_root = 0, RULE_statement = 1, RULE_include = 2, RULE_block = 3, RULE_if = 4, 
		RULE_elif = 5, RULE_else = 6, RULE_expression = 7, RULE_call = 8, RULE_param = 9, 
		RULE_ref = 10, RULE_command = 11, RULE_argument = 12, RULE_literal = 13, 
		RULE_keyword = 14;
	public static readonly string[] ruleNames = {
		"root", "statement", "include", "block", "if", "elif", "else", "expression", 
		"call", "param", "ref", "command", "argument", "literal", "keyword"
	};

	private static readonly string[] _LiteralNames = {
		null, "'include'", "'end'", "'if'", "'('", "')'", "'endif'", "'elseif'", 
		"'else'", "'*'", "'/'", "'+'", "'-'", "'>'", "'=='", "'>='", "'<'", "'<='", 
		"'and'", "'or'", "'not'", "','", "'$'", "'${'", "'}'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "STRING", "UnterminatedStringLiteral", "ID", "EOL", 
		"COMMENT", "OPTION", "INTEGER", "FLOAT", "WS", "INDENT", "DEDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ArgScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ArgScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ArgScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ArgScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ArgScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << ID) | (1L << EOL) | (1L << COMMENT))) != 0)) {
				{
				{
				State = 30;
				statement();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ArgScriptParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(ArgScriptParser.COMMENT, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 40;
				command();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41;
				include();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 42;
				Match(EOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 43;
				Match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ArgScriptParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(ArgScriptParser.COMMENT, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 4, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(T__0);
			State = 47;
			Match(STRING);
			State = 49;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 48;
				Match(COMMENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(ArgScriptParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(ArgScriptParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(ArgScriptParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(ArgScriptParser.COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			keyword();
			State = 52;
			argument();
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 53;
				Match(COMMENT);
				}
			}

			State = 56;
			Match(EOL);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 57;
				statement();
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << ID) | (1L << EOL) | (1L << COMMENT))) != 0) );
			State = 62;
			Match(T__1);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 63;
				Match(COMMENT);
				}
			}

			State = 66;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(ArgScriptParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(ArgScriptParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(ArgScriptParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(ArgScriptParser.COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifContext[] elif() {
			return GetRuleContexts<ElifContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifContext elif(int i) {
			return GetRuleContext<ElifContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 8, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__2);
			State = 69;
			Match(T__3);
			State = 70;
			expression(0);
			State = 71;
			Match(T__4);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 72;
				Match(COMMENT);
				}
			}

			State = 75;
			Match(EOL);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << ID) | (1L << EOL) | (1L << COMMENT))) != 0)) {
				{
				{
				State = 76;
				statement();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 82;
				elif();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 88;
				@else();
				}
			}

			State = 91;
			Match(T__5);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 92;
				Match(COMMENT);
				}
			}

			State = 95;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ArgScriptParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(ArgScriptParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterElif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitElif(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifContext elif() {
		ElifContext _localctx = new ElifContext(Context, State);
		EnterRule(_localctx, 10, RULE_elif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(T__6);
			State = 98;
			Match(T__3);
			State = 99;
			expression(0);
			State = 100;
			Match(T__4);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 101;
				Match(COMMENT);
				}
			}

			State = 104;
			Match(EOL);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << ID) | (1L << EOL) | (1L << COMMENT))) != 0)) {
				{
				{
				State = 105;
				statement();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ArgScriptParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(ArgScriptParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 12, RULE_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(T__7);
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 112;
				Match(COMMENT);
				}
			}

			State = 115;
			Match(EOL);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << ID) | (1L << EOL) | (1L << COMMENT))) != 0)) {
				{
				{
				State = 116;
				statement();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OpContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterParen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitParen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomicContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public AtomicContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitAtomic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
			case T__22:
				{
				_localctx = new AtomicContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 123;
				@ref();
				}
				break;
			case T__24:
			case T__25:
			case STRING:
			case INTEGER:
			case FLOAT:
				{
				_localctx = new AtomicContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 124;
				literal();
				}
				break;
			case ID:
				{
				_localctx = new AtomicContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 125;
				call();
				}
				break;
			case T__19:
				{
				_localctx = new BoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 126;
				((BoolContext)_localctx).op = Match(T__19);
				State = 127;
				expression(2);
				}
				break;
			case T__3:
				{
				_localctx = new ParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 128;
				Match(T__3);
				State = 129;
				expression(0);
				State = 130;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 163;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 161;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new OpContext(new ExpressionContext(_parentctx, _parentState));
						((OpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 134;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 135;
						((OpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__8 || _la==T__9) ) {
							((OpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 136;
						((OpContext)_localctx).right = expression(12);
						}
						break;
					case 2:
						{
						_localctx = new OpContext(new ExpressionContext(_parentctx, _parentState));
						((OpContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 137;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 138;
						((OpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__10 || _la==T__11) ) {
							((OpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 139;
						((OpContext)_localctx).right = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new CompContext(new ExpressionContext(_parentctx, _parentState));
						((CompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 141;
						((CompContext)_localctx).op = Match(T__12);
						State = 142;
						((CompContext)_localctx).right = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new CompContext(new ExpressionContext(_parentctx, _parentState));
						((CompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 143;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 144;
						((CompContext)_localctx).op = Match(T__13);
						State = 145;
						((CompContext)_localctx).right = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new CompContext(new ExpressionContext(_parentctx, _parentState));
						((CompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 146;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 147;
						((CompContext)_localctx).op = Match(T__14);
						State = 148;
						((CompContext)_localctx).right = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new CompContext(new ExpressionContext(_parentctx, _parentState));
						((CompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 149;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 150;
						((CompContext)_localctx).op = Match(T__15);
						State = 151;
						((CompContext)_localctx).right = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new CompContext(new ExpressionContext(_parentctx, _parentState));
						((CompContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 152;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 153;
						((CompContext)_localctx).op = Match(T__16);
						State = 154;
						((CompContext)_localctx).right = expression(6);
						}
						break;
					case 8:
						{
						_localctx = new BoolContext(new ExpressionContext(_parentctx, _parentState));
						((BoolContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 155;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 156;
						((BoolContext)_localctx).op = Match(T__17);
						State = 157;
						((BoolContext)_localctx).right = expression(5);
						}
						break;
					case 9:
						{
						_localctx = new BoolContext(new ExpressionContext(_parentctx, _parentState));
						((BoolContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 158;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 159;
						((BoolContext)_localctx).op = Match(T__18);
						State = 160;
						((BoolContext)_localctx).right = expression(4);
						}
						break;
					}
					} 
				}
				State = 165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 16, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			keyword();
			State = 167;
			Match(T__3);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 168;
				param();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__19) | (1L << T__21) | (1L << T__22) | (1L << T__24) | (1L << T__25) | (1L << STRING) | (1L << ID) | (1L << INTEGER) | (1L << FLOAT))) != 0) );
			State = 173;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ArgScriptParser.ID, 0); }
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 18, RULE_param);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				expression(0);
				State = 176;
				Match(T__20);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ArgScriptParser.ID, 0); }
		public RefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RefContext @ref() {
		RefContext _localctx = new RefContext(Context, State);
		EnterRule(_localctx, 20, RULE_ref);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182;
				Match(T__21);
				State = 183;
				Match(ID);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				Match(T__22);
				State = 185;
				Match(ID);
				State = 186;
				Match(T__23);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(ArgScriptParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(ArgScriptParser.COMMENT, 0); }
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 22, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			keyword();
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__21) | (1L << T__22) | (1L << T__24) | (1L << T__25) | (1L << STRING) | (1L << ID) | (1L << OPTION) | (1L << INTEGER) | (1L << FLOAT))) != 0)) {
				{
				{
				State = 190;
				argument();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 196;
				Match(COMMENT);
				}
			}

			State = 199;
			Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ArgScriptParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(ArgScriptParser.OPTION, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				Match(ID);
				State = 202;
				expression(0);
				}
				break;
			case T__24:
			case T__25:
			case STRING:
			case INTEGER:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				literal();
				}
				break;
			case T__21:
			case T__22:
				EnterOuterAlt(_localctx, 3);
				{
				State = 204;
				@ref();
				}
				break;
			case OPTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 205;
				Match(OPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ArgScriptParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ArgScriptParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ArgScriptParser.STRING, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 26, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__24) | (1L << T__25) | (1L << STRING) | (1L << INTEGER) | (1L << FLOAT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ArgScriptParser.ID, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IArgScriptListener typedListener = listener as IArgScriptListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IArgScriptVisitor<TResult> typedVisitor = visitor as IArgScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 28, RULE_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\xD7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\a', '\x2', '\"', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '%', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '/', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x34', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x39', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '=', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '>', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x43', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'L', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'P', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', 'S', '\v', '\x6', '\x3', '\x6', '\a', '\x6', 'V', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'Y', '\v', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\\', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'`', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'i', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', 'm', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'p', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 't', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', 'x', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '{', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x87', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xA4', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\xA7', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x6', '\n', '\xAC', '\n', '\n', '\r', '\n', '\xE', '\n', '\xAD', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\xB7', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xBE', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xC2', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\xC5', '\v', '\r', '\x3', '\r', '\x5', '\r', '\xC8', 
		'\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xD1', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x2', '\x3', '\x10', '\x11', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', '\x2', 
		'\x5', '\x3', '\x2', '\v', '\f', '\x3', '\x2', '\r', '\xE', '\x4', '\x2', 
		'\x1B', '\x1D', '#', '$', '\x2', '\xF0', '\x2', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '.', '\x3', '\x2', '\x2', '\x2', '\x6', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x35', '\x3', '\x2', '\x2', '\x2', '\n', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'q', '\x3', '\x2', '\x2', '\x2', '\x10', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x14', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xD2', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x5', '\x4', '\x3', '\x2', '!', 
		' ', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', 
		'#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', 
		'$', '&', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\a', '\x2', '\x2', '\x3', '\'', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '(', '/', '\x5', '\n', '\x6', '\x2', ')', '/', '\x5', '\b', '\x5', 
		'\x2', '*', '/', '\x5', '\x18', '\r', '\x2', '+', '/', '\x5', '\x6', '\x4', 
		'\x2', ',', '/', '\a', ' ', '\x2', '\x2', '-', '/', '\a', '!', '\x2', 
		'\x2', '.', '(', '\x3', '\x2', '\x2', '\x2', '.', ')', '\x3', '\x2', '\x2', 
		'\x2', '.', '*', '\x3', '\x2', '\x2', '\x2', '.', '+', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x5', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x3', 
		'\x2', '\x2', '\x31', '\x33', '\a', '\x1D', '\x2', '\x2', '\x32', '\x34', 
		'\a', '!', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x5', '\x1E', '\x10', '\x2', '\x36', '\x38', '\x5', 
		'\x1A', '\xE', '\x2', '\x37', '\x39', '\a', '!', '\x2', '\x2', '\x38', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '<', '\a', ' ', '\x2', 
		'\x2', ';', '=', '\x5', '\x4', '\x3', '\x2', '<', ';', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x42', '\a', '\x4', '\x2', '\x2', '\x41', '\x43', '\a', '!', 
		'\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\a', ' ', '\x2', '\x2', '\x45', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\a', '\x5', '\x2', '\x2', 'G', 'H', '\a', '\x6', 
		'\x2', '\x2', 'H', 'I', '\x5', '\x10', '\t', '\x2', 'I', 'K', '\a', '\a', 
		'\x2', '\x2', 'J', 'L', '\a', '!', '\x2', '\x2', 'K', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'Q', '\a', ' ', '\x2', '\x2', 'N', 'P', '\x5', '\x4', 
		'\x3', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'W', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'V', '\x5', '\f', '\a', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\x5', 
		'\xE', '\b', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '_', 
		'\a', '\b', '\x2', '\x2', '^', '`', '\a', '!', '\x2', '\x2', '_', '^', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', ' ', '\x2', 
		'\x2', '\x62', '\v', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', 
		'\t', '\x2', '\x2', '\x64', '\x65', '\a', '\x6', '\x2', '\x2', '\x65', 
		'\x66', '\x5', '\x10', '\t', '\x2', '\x66', 'h', '\a', '\a', '\x2', '\x2', 
		'g', 'i', '\a', '!', '\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 
		'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 
		'j', 'n', '\a', ' ', '\x2', '\x2', 'k', 'm', '\x5', '\x4', '\x3', '\x2', 
		'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'p', '\x3', '\x2', '\x2', '\x2', 
		'n', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', '\r', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'q', 's', '\a', '\n', '\x2', '\x2', 'r', 't', '\a', '!', '\x2', 
		'\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'y', '\a', ' ', '\x2', 
		'\x2', 'v', 'x', '\x5', '\x4', '\x3', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', '{', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '|', '}', '\b', '\t', 
		'\x1', '\x2', '}', '\x87', '\x5', '\x16', '\f', '\x2', '~', '\x87', '\x5', 
		'\x1C', '\xF', '\x2', '\x7F', '\x87', '\x5', '\x12', '\n', '\x2', '\x80', 
		'\x81', '\a', '\x16', '\x2', '\x2', '\x81', '\x87', '\x5', '\x10', '\t', 
		'\x4', '\x82', '\x83', '\a', '\x6', '\x2', '\x2', '\x83', '\x84', '\x5', 
		'\x10', '\t', '\x2', '\x84', '\x85', '\a', '\a', '\x2', '\x2', '\x85', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x86', '|', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '~', '\x3', '\x2', '\x2', '\x2', '\x86', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x80', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x87', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\f', '\r', '\x2', '\x2', '\x89', '\x8A', '\t', 
		'\x2', '\x2', '\x2', '\x8A', '\xA4', '\x5', '\x10', '\t', '\xE', '\x8B', 
		'\x8C', '\f', '\f', '\x2', '\x2', '\x8C', '\x8D', '\t', '\x3', '\x2', 
		'\x2', '\x8D', '\xA4', '\x5', '\x10', '\t', '\r', '\x8E', '\x8F', '\f', 
		'\v', '\x2', '\x2', '\x8F', '\x90', '\a', '\xF', '\x2', '\x2', '\x90', 
		'\xA4', '\x5', '\x10', '\t', '\f', '\x91', '\x92', '\f', '\n', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\x10', '\x2', '\x2', '\x93', '\xA4', '\x5', 
		'\x10', '\t', '\v', '\x94', '\x95', '\f', '\t', '\x2', '\x2', '\x95', 
		'\x96', '\a', '\x11', '\x2', '\x2', '\x96', '\xA4', '\x5', '\x10', '\t', 
		'\n', '\x97', '\x98', '\f', '\b', '\x2', '\x2', '\x98', '\x99', '\a', 
		'\x12', '\x2', '\x2', '\x99', '\xA4', '\x5', '\x10', '\t', '\t', '\x9A', 
		'\x9B', '\f', '\a', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x13', '\x2', 
		'\x2', '\x9C', '\xA4', '\x5', '\x10', '\t', '\b', '\x9D', '\x9E', '\f', 
		'\x6', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x14', '\x2', '\x2', '\x9F', 
		'\xA4', '\x5', '\x10', '\t', '\a', '\xA0', '\xA1', '\f', '\x5', '\x2', 
		'\x2', '\xA1', '\xA2', '\a', '\x15', '\x2', '\x2', '\xA2', '\xA4', '\x5', 
		'\x10', '\t', '\x6', '\xA3', '\x88', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\x91', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\x5', 
		'\x1E', '\x10', '\x2', '\xA9', '\xAB', '\a', '\x6', '\x2', '\x2', '\xAA', 
		'\xAC', '\x5', '\x14', '\v', '\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '\a', '\x2', 
		'\x2', '\xB0', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x5', 
		'\x10', '\t', '\x2', '\xB2', '\xB3', '\a', '\x17', '\x2', '\x2', '\xB3', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB7', '\x5', '\x10', '\t', 
		'\x2', '\xB5', '\xB7', '\a', '\x1F', '\x2', '\x2', '\xB6', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '\x18', '\x2', '\x2', '\xB9', '\xBE', '\a', 
		'\x1F', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x19', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', '\x1F', '\x2', '\x2', '\xBC', '\xBE', '\a', '\x1A', '\x2', 
		'\x2', '\xBD', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\x17', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC3', '\x5', '\x1E', '\x10', '\x2', '\xC0', '\xC2', '\x5', '\x1A', '\xE', 
		'\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', '\a', 
		'!', '\x2', '\x2', '\xC7', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xCA', '\a', ' ', '\x2', '\x2', '\xCA', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x1F', '\x2', '\x2', '\xCC', 
		'\xD1', '\x5', '\x10', '\t', '\x2', '\xCD', '\xD1', '\x5', '\x1C', '\xF', 
		'\x2', '\xCE', '\xD1', '\x5', '\x16', '\f', '\x2', '\xCF', '\xD1', '\a', 
		'\"', '\x2', '\x2', '\xD0', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD3', '\t', '\x4', '\x2', '\x2', '\xD3', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', '\x1F', '\x2', 
		'\x2', '\xD5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1A', '#', '.', '\x33', 
		'\x38', '>', '\x42', 'K', 'Q', 'W', '[', '_', 'h', 'n', 's', 'y', '\x86', 
		'\xA3', '\xA5', '\xAD', '\xB6', '\xBD', '\xC3', '\xC7', '\xD0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
