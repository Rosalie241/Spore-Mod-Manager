<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SporeMods.Manager"
                    xmlns:core="clr-namespace:SporeMods.Core;assembly=SporeMods.Core"
                    xmlns:mods="clr-namespace:SporeMods.Core.Mods;assembly=SporeMods.Core"
                    xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:ui="clr-namespace:Mechanism.Wpf.Core;assembly=Mechanism.Wpf.Core"
                    xmlns:shale="clr-namespace:Mechanism.Wpf.Styles.Shale;assembly=Mechanism.Wpf.Styles.Shale"
                    xmlns:conv="clr-namespace:Mechanism.Wpf.Core.Converters;assembly=Mechanism.Wpf.Core"
                    xmlns:win="clr-namespace:Mechanism.Wpf.Core.Windows;assembly=Mechanism.Wpf.Core"
                    xmlns:uib="clr-namespace:Mechanism.Wpf.Core.Behaviors;assembly=Mechanism.Wpf.Core"
                    xmlns:autocomp="clr-namespace:WPFTextBoxAutoComplete;assembly=WPFTextBoxAutoComplete"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <!--ResourceDictionary Source="pack://application:,,,/Mechanism.UI.Wpf;component/Themes/Shale.xaml"/-->
        <ResourceDictionary Source="pack://application:,,,/Mechanism.Wpf.Styles.Shale;component/Themes/Shale.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Mechanism.Wpf.Styles.Shale;component/Themes/Colors/Accent.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Mechanism.Wpf.Styles.Shale;component/Themes/Colors/BaseLight.xaml"/>
        <!--Un-comment the line below for Dark Shale-->
        <!--ResourceDictionary Source="pack://application:,,,/Mechanism.UI.Wpf;component/Themes/Colors/ShaleBaseDark.xaml"/-->
    </ResourceDictionary.MergedDictionaries>

    <conv:IconToImageBrushConverter x:Key="IconToImageBrushConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <local:StringIsComponentGroupNameConverter x:Key="StringIsComponentGroupNameConverter"/>
    <local:BoolToNullableBoolConverter x:Key="BoolToNullableBoolConverter"/>

    <Style x:Key="WindowBackdropControlStyle" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid x:Name="RootGrid" Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                        <Border x:Name="TitlebarBorder" VerticalAlignment="Top" Height="30" BorderBrush="{DynamicResource TitlebarBorderBrush}" BorderThickness="0,0,0,1">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TitlebarActiveGradientStops}"/>
                            </Border.Background>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Value="False">
                            <Setter TargetName="TitlebarBorder" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TitlebarInactiveGradientStops}"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Grid x:Key="NoIconModIcon" x:Shared="False" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Ellipse Stroke="{DynamicResource ButtonIdleBorderBrush}" StrokeThickness="1">
            <Ellipse.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
            </Ellipse.Fill>
        </Ellipse>
        <Ellipse Margin="2">
            <Ellipse.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonBackgroundGradientStops}"/>
            </Ellipse.Fill>
        </Ellipse>
        <TextBlock Text="?" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" Foreground="{DynamicResource ButtonForegroundBrush}" FontSize="15" FontWeight="Black"/>
    </Grid>

    <Style x:Key="DropdownToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CaptionToggleButtonStyle}">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Margin" Value="0"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
            </MultiDataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="InstalledModsListViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Type ListView}}">
        <Style.Resources>
            <CubicEase x:Key="ScalingEase" EasingMode="EaseOut"/>
            <DataTemplate DataType="{x:Type mods:ManagedMod}">
                <DockPanel>
                    <DockPanel x:Name="ModRootDockPanel" Height="42" DockPanel.Dock="Top">
                        <!--Height="{Binding Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}"-->
                        <Grid x:Name="StatusGrid" Margin="0,0,5,0" DockPanel.Dock="Right">
                            <Grid.RenderTransform>
                                <TranslateTransform X="0"/>
                            </Grid.RenderTransform>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <TextBlock Text="{Binding ModVersion}" Visibility="{Binding ModHasVersion, Converter={StaticResource BooleanToVisibilityConverter}}" Margin="15,0" VerticalAlignment="Center"/>
                                <ui:ToggleSwitch x:Name="IsEnabledToggleSwitch" TrueText="{DynamicResource ModSwitchOnText}" FalseText="{DynamicResource ModSwitchOffText}" Content="{x:Null}" IsChecked="{Binding IsEnabled, FallbackValue=True}" Visibility="{Binding Source={x:Static core:Settings.DeveloperMode}, Converter={StaticResource BooleanToVisibilityConverter}}" VerticalAlignment="Center" Width="110" MinWidth="110" HorizontalAlignment="Right"/>
                                <!--{Binding CanDisable, Converter={StaticResource BooleanToVisibilityConverter}}-->
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Visibility="{Binding IsProgressing, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
                                    <TextBlock x:Name="InstallingNowTextBlock" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Left" Text="{DynamicResource ModInstallingNowText}" Margin="0,0,5,0"/>
                                    <ProgressBar x:Name="ModProgressBar" Width="100" Height="23" Value="{Binding Progress, Mode=OneWay}" Minimum="0" Maximum="100" VerticalAlignment="Stretch"/>
                                </StackPanel>
                            </StackPanel>
                        </Grid>
                        <!--ui:ToggleSwitch x:Name="IsEnabledToggleSwitch" IsChecked="{Binding IsEnabled}" TrueText="{DynamicResource ModSwitchOn}" FalseText="{DynamicResource ModSwitchOff}" VerticalAlignment="Center" IsThreeState="False" DockPanel.Dock="Right"/-->
                        <!--mod:ToggleSwitch.Style>
                                                    <Style TargetType="{x:Type mod:ToggleSwitch}" BasedOn="{StaticResource {x:Type mod:ToggleSwitch}}">
                                                        <EventSetter Event="Checked" Handler="ModToggleSwitch_Checked"/>
                                                    </Style>
                                                </mod:ToggleSwitch.Style-->
                        <Grid x:Name="IconGrid" Width="{Binding Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DockPanel}}}" Height="{Binding Width, RelativeSource={RelativeSource Mode=Self}}" Margin="2,0" DockPanel.Dock="Left">
                            <Rectangle x:Name="IconEdgeShadowRectangle" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="5" Margin="0,5,-2,5">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0" GradientStops="{DynamicResource SeparatorFillGradientStops}"/>
                                </Rectangle.Fill>
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource SeparatorMaskGradientStops}"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <ContentPresenter x:Name="IconContainer" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Effect="{DynamicResource DropShadow}">
                                <ContentPresenter.Content>
                                    <Canvas x:Name="IconCanvas" HorizontalAlignment="Center" VerticalAlignment="Center" Width="32" Height="32" Background="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}}"/>
                                </ContentPresenter.Content>
                            </ContentPresenter>
                        </Grid>
                        <ToggleButton x:Name="ExpandCollapseToggleButton" Visibility="Collapsed" Style="{DynamicResource DropdownToggleButtonStyle}" DockPanel.Dock="Right">
                            <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 6 L 6 0 L 12 6" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="-180"/>
                                </Path.RenderTransform>
                            </Path>
                        </ToggleButton>
                        <!--Rectangle DockPanel.Dock="Left" Width="{Binding Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DockPanel}}, Converter={StaticResource WidthToHalfWidthConverter}}"/-->
                        <TextBlock Margin="5,0,0,0" Text="{Binding DisplayName}" VerticalAlignment="Center" TextAlignment="Left" HorizontalAlignment="Left"/>
                    </DockPanel>
                    <StackPanel x:Name="DescriptionGrid" Orientation="Vertical" Visibility="{Binding Visibility, ElementName=ExpandCollapseToggleButton}">
                        <!--MaxWidth="{Binding ActualWidth, ElementName=ModRootDockPanel}"-->
                        <StackPanel.LayoutTransform>
                            <ScaleTransform ScaleY="0"/>
                        </StackPanel.LayoutTransform>
                        <Rectangle x:Name="DescriptionSeparator" HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="40,0" Height="5">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource SeparatorFillGradientStops}"/>
                            </Rectangle.Fill>
                            <Rectangle.OpacityMask>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0" GradientStops="{DynamicResource SeparatorMaskGradientStops}"/>
                            </Rectangle.OpacityMask>
                        </Rectangle>
                        <!--Fill="{DynamicResource HorizontalPanelBorderBrush}"/-->
                        <ui:NoSizeDecorator>
                            <TextBlock Text="{Binding Description}" TextWrapping="Wrap" HorizontalAlignment="Left" Padding="5" Width="{Binding ActualWidth, ElementName=ModRootDockPanel}" ClipToBounds="False"/>
                        </ui:NoSizeDecorator>
                    </StackPanel>
                </DockPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding HasDescription}" Value="True">
                        <Setter TargetName="ExpandCollapseToggleButton" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsChecked, ElementName=ExpandCollapseToggleButton}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125"/>
                                    <DoubleAnimation Storyboard.TargetName="DescriptionGrid" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="-180" Duration="0:0:0.125"/>
                                    <DoubleAnimation Storyboard.TargetName="DescriptionGrid" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <!--DoubleAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Height" To="50" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                    <!--DoubleAnimation Storyboard.TargetName="StatusGrid" Storyboard.TargetProperty="RenderTransform.X" To="-5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->

                                    <ThicknessAnimation Storyboard.TargetName="IconGrid" Storyboard.TargetProperty="Margin" To="2,0,7,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <ThicknessAnimation Storyboard.TargetName="IconEdgeShadowRectangle" Storyboard.TargetProperty="Margin" To="0,0,-7,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <ThicknessAnimation Storyboard.TargetName="DescriptionSeparator" Storyboard.TargetProperty="Margin" To="35,5,35,-5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <!--ThicknessAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Margin" To="-5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                    <!--DoubleAnimation Storyboard.TargetName="IsEnabledToggleSwitch" Storyboard.TargetProperty="Width" To="105" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <!--DoubleAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Height" To="40" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                    <!--DoubleAnimation Storyboard.TargetName="StatusGrid" Storyboard.TargetProperty="RenderTransform.X" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->

                                    <ThicknessAnimation Storyboard.TargetName="IconGrid" Storyboard.TargetProperty="Margin" To="2,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <ThicknessAnimation Storyboard.TargetName="IconEdgeShadowRectangle" Storyboard.TargetProperty="Margin" To="0,5,-2,5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <ThicknessAnimation Storyboard.TargetName="DescriptionSeparator" Storyboard.TargetProperty="Margin" To="40,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <!--ThicknessAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Margin" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                    <!--DoubleAnimation Storyboard.TargetName="IsEnabledToggleSwitch" Storyboard.TargetProperty="Width" To="100" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Icon}" Value="{x:Null}">
                        <Setter TargetName="IconContainer" Property="Content" Value="{DynamicResource NoIconModIcon}"/>
                    </DataTrigger>
                    <!--DataTrigger Binding="{Binding IsProgressing}" Value="True">
                            <Setter TargetName="StatusGrid" Property="Width" Value="200"/>
                            <Setter TargetName="InstallingNowTextBlock" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ModProgressBar" Property="Visibility" Value="Visible"/>
                        </DataTrigger-->
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate DataType="{x:Type mods:ManualInstalledFile}">
                <DockPanel x:Name="ModRootDockPanel" Height="42" Margin="10,0">
                    <!--Grid Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Path Data="M 0 0 L 15 0 L 20 5 L 20 24 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}"/>
                        <Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
                        <TextBlock Text="!" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" Foreground="{DynamicResource SelectedHighlightBrush}" Effect="{DynamicResource IconOuterShadow}" FontSize="15" FontWeight="Black"/>
                    </Grid-->
                    <TextBlock Text="{DynamicResource ModInstalledManuallyText}" TextAlignment="Right" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10,0,0,0" Foreground="{DynamicResource ErrorTextBrush}" DockPanel.Dock="Right"/>
                    <!--TextBlock.Foreground>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,0" GradientStops="{DynamicResource RedIconGradientStops}"/>
                    </TextBlock.Foreground-->
                    <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center" TextAlignment="Left" HorizontalAlignment="Left"/>
                </DockPanel>
                <!--DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ThicknessAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Margin" To="5,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ThicknessAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Margin" To="10,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </DataTemplate.Triggers-->
            </DataTemplate>
            <DataTemplate DataType="{x:Type mods:InstallError}">
                <Grid>
                    <Rectangle x:Name="SizeHelperRectangle"/>
                    <Rectangle x:Name="BackgroundRectangle" RadiusX="3" RadiusY="3" Opacity="0.25">
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource RedIconGradientStops}"/>
                        </Rectangle.Fill>
                    </Rectangle>
                    <ui:NoSizeDecorator>
                        <StackPanel Orientation="Vertical" Width="{Binding ActualWidth, ElementName=SizeHelperRectangle}">
                            <DockPanel Height="42" DockPanel.Dock="Top">
                                <Button Margin="10" Content="Copy Error" DataContext="{Binding}" DockPanel.Dock="Right">
                                    <e:Interaction.Behaviors>
                                        <local:CopyErrorBehavior/>
                                    </e:Interaction.Behaviors>
                                </Button>
                                <TextBlock Margin="10,0" Text="{Binding DisplayName}" TextWrapping="Wrap" VerticalAlignment="Center" TextAlignment="Left" HorizontalAlignment="Left"/>
                            </DockPanel>
                            <Rectangle x:Name="ExceptionSeparator" HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="40,0" Height="5">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource SeparatorFillGradientStops}"/>
                                </Rectangle.Fill>
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0" GradientStops="{DynamicResource SeparatorMaskGradientStops}"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <TextBlock Text="{Binding InstallException}" TextWrapping="Wrap" Margin="5,0,5,5"/>
                        </StackPanel>
                    </ui:NoSizeDecorator>
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ThicknessAnimation Storyboard.TargetName="BackgroundRectangle" Storyboard.TargetProperty="Margin" To="-5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <ThicknessAnimation Storyboard.TargetName="ExceptionSeparator" Storyboard.TargetProperty="Margin" To="30,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ThicknessAnimation Storyboard.TargetName="BackgroundRectangle" Storyboard.TargetProperty="Margin" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <ThicknessAnimation Storyboard.TargetName="ExceptionSeparator" Storyboard.TargetProperty="Margin" To="40,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ScrollViewer" uib:ScrollAnimationBehavior.IsEnabled="{TemplateBinding uib:ScrollAnimationBehavior.IsEnabled}" uib:ScrollAnimationBehavior.TimeDuration="{TemplateBinding uib:ScrollAnimationBehavior.TimeDuration}" uib:ScrollAnimationBehavior.EasingFunction="{TemplateBinding uib:ScrollAnimationBehavior.EasingFunction}">
                            <ui:AttachedProperties.CornerCurves>
                                <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                            </ui:AttachedProperties.CornerCurves>
                            <!--Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}"-->
                            <Border x:Name="ItemsPresenterBorder" Background="#01000000">
                                <e:Interaction.Behaviors>
                                    <local:DeselectAllBehavior ItemsPresenterElement="{Binding Source={x:Reference ItemsPresenter}}"/>
                                </e:Interaction.Behaviors>
                                <ItemsPresenter x:Name="ItemsPresenter"/>
                            </Border>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource CardListViewItemStyle}"/>
    </Style>

    <Style x:Key="GamePathCheckBoxStyle" TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Margin" Value="0,0,-1,0"/>
        <Setter Property="ui:AttachedProperties.CornerCurves">
            <Setter.Value>
                <ui:CornerCurves TopRight="False" BottomRight="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#01000000">
                        <DockPanel>
                            <Grid Width="Auto" VerticalAlignment="Stretch" DockPanel.Dock="Right">
                                <Border x:Name="IdleBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                    </Border.Background>
                                    <Border x:Name="IdleInnerBackground" CornerRadius="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonBackgroundGradientStops}"/>
                                        </Border.Background>
                                    </Border>
                                </Border>
                                <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1"  GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                    </Border.Background>
                                    <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                        </Border.Background>
                                    </Border>
                                </Border>
                                <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                    </Border.Background>
                                    <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                        </Border.Background>
                                    </Border>
                                </Border>
                                <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                    <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                </Border>
                                <Grid x:Name="OpacityLimiterCanvas" Opacity="1" Margin="5">
                                    <DockPanel>
                                        <Grid DockPanel.Dock="Right">
                                            <Path x:Name="CheckMark" Data="M 2 5 L 4 9 L 8 0" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{DynamicResource CheckBoxTickBrush}" StrokeThickness="1.125"
                              Opacity="0" />
                                            <Path x:Name="IndeterminateBox" Data="M 0.5 0.5 L 0.5 6 L 6 6 L 6 0.5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource CheckBoxTickBrush}" Stroke="{DynamicResource CheckBoxTickBrush}" StrokeThickness="1.25" Opacity="0" />
                                        </Grid>
                                        <TextBlock Text="{DynamicResource AutoDetectPathText}" Margin="0,0,5,0"/>
                                    </DockPanel>
                                </Grid>
                            </Grid>
                            <Grid Margin="5,0,0,0">
                                <ContentPresenter Margin="{TemplateBinding Padding}"/>
                            </Grid>
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsThreeState" Value="True" />
                                <Condition Property="IsChecked" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IndeterminateBox"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IndeterminateBox"
                                                         Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark"
                                                         Storyboard.TargetProperty="Opacity" To="0"
                                                         Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBackground"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                        <DoubleAnimation Storyboard.TargetName="OpacityLimiterCanvas"
                                                         Storyboard.TargetProperty="Opacity" To="0.5"
                                                         Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledBackground"
                                                         Storyboard.TargetProperty="Opacity" To="0"
                                                         Duration="0:0:0.125" />
                                        <DoubleAnimation Storyboard.TargetName="OpacityLimiterCanvas"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GamePathActionBoxStyle" TargetType="{x:Type ui:ActionBox}" BasedOn="{StaticResource {x:Type ui:ActionBox}}">
        <Setter Property="ButtonContent" Value="Browse..."/>
        <Setter Property="Margin" Value="0,5"/>
        <Setter Property="ui:AttachedProperties.CornerCurves">
            <Setter.Value>
                <ui:CornerCurves TopLeft="False" BottomLeft="False"/>
            </Setter.Value>
        </Setter>
        <!--Style.Triggers>
            <Trigger Property="Name" Value="GaDataFolderTextBox">
            </Trigger>
        </Style.Triggers-->
    </Style>

    <Style x:Key="ToolstripButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Margin" Value="0,0,5,0"/>
    </Style>

    <SolidColorBrush x:Key="InstallModsButtonBorderBrush">#FFFFC574</SolidColorBrush>
    <SolidColorBrush x:Key="ConfigureModButtonBorderBrush">#FF9774FF</SolidColorBrush>
    <SolidColorBrush x:Key="UninstallModsButtonBorderBrush">#FFFF4451</SolidColorBrush>
    <SolidColorBrush x:Key="LaunchGameButtonBorderBrush">#FF44FCFF</SolidColorBrush>

    <Style x:Key="MainWindowHeaderContentControlStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Rectangle VerticalAlignment="Bottom" Height="18" IsHitTestVisible="False" Margin="0,-18">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.75" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border x:Name="BackgroundBorder" Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="Top">
                            <ContentPresenter Content="{TemplateBinding Content}" Margin="5"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Canvas x:Key="SearchGoIcon" x:Shared="False" Width="16" Height="16">
        <Path Data="M 0 7 L 7 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Canvas.Top="9"/>
        <Ellipse Width="11" Height="11" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Canvas.Left="5"/>
    </Canvas>
    <Path x:Key="SearchCancelIcon" x:Shared="False" Width="16" Height="16" Data="M 0 0 L 16 16 M 0 16 L 16 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2"/>
    <Style x:Key="SearchBoxStyle" TargetType="{x:Type ui:ActionBox}" BasedOn="{StaticResource {x:Type ui:ActionBox}}">
        <Setter Property="Height" Value="29"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="ButtonContent" Value="{DynamicResource SearchCancelIcon}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="ButtonContent" Value="{DynamicResource SearchGoIcon}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Path x:Key="SearchTargetsToggleButtonIcon" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" RenderTransformOrigin="0.5,0.5">
        <!--{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}-->
        <Path.RenderTransform>
            <RotateTransform Angle="0"/>
        </Path.RenderTransform>
        <Path.Style>
            <Style TargetType="Path">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" To="180" Duration="0:0:0.125" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Path.Style>
    </Path>
    <Style x:Key="SearchTargetsToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Content" Value="{DynamicResource SearchTargetsToggleButtonIcon}"/>
    </Style>

    <Style x:Key="MainWindowFooterContentControlStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Height" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Rectangle VerticalAlignment="Top" Height="9" IsHitTestVisible="False" Margin="0,-9">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border x:Name="BackgroundBorder" Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="Bottom">
                            <ContentPresenter Content="{TemplateBinding Content}" Margin="5,5,0,5"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:ShadowedWindow}}, FallbackValue=Maximized}" Value="Normal">
                            <Setter TargetName="BackgroundBorder" Property="CornerRadius" Value="0,0,3,3"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InstallModsButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ToolstripButtonStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource InstallModsButtonBorderBrush}"/>
    </Style>

    <Style x:Key="ConfigureModButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ToolstripButtonStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource ConfigureModButtonBorderBrush}"/>
    </Style>

    <Style x:Key="UninstallModsButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ToolstripButtonStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource UninstallModsButtonBorderBrush}"/>
    </Style>

    <Style x:Key="LaunchGameButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ToolstripButtonStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource LaunchGameButtonBorderBrush}"/>
    </Style>

    <Style x:Key="InstallModsPromptContentControlStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0.5" Grid.ColumnSpan="4"/>
                        <Path x:Name="ArrowHintPath" Data="M 15 0 L 14 50 L 0 35 L 15 50 L 30 35 L 16 50 Z" Stroke="{DynamicResource WindowForegroundBrush}" StrokeThickness="3" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="20,0">
                            <Path.RenderTransform>
                                <TranslateTransform x:Name="HowToArrowTranslateTransform0" X="0" Y="-20"/>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ArrowHintPath" Storyboard.TargetProperty="RenderTransform.Y" From="-20" To="0" Duration="0:0:0.500" RepeatBehavior="Forever" AutoReverse="True">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModalDialogContentControlStyle" TargetType="{x:Type ui:AnimatableContentControl}" BasedOn="{StaticResource {x:Type ui:AnimatableContentControl}}">
        <Setter Property="Margin" Value="0,-31,0,0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding FallbackValue=True, Path=HasCustomWindowDecorations, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ManagerContent}}}" Value="False">
                <Setter Property="ui:AttachedProperties.CornerCurves" Value="False"/>
                <!--Setter TargetName="RootBorder" Property="CornerRadius" Value="0"/>
                <Setter TargetName="RootBorder" Property="BorderThickness" Value="0"/>
                <Setter Property="Margin" Value="0"/-->
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DropModsHereTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Name="ModConfiguratorComponentsListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid>
                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
                            <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Visible" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Name="ModConfiguratorComponentTemplate" DataType="{x:Type mods:ModComponent}">
        <Grid>
            <Grid x:Name="BoxGrid" Visibility="Collapsed">
                <RadioButton x:Name="ComponentRadioButton" Content="{Binding DisplayName}">
                    <e:Interaction.Behaviors>
                        <local:CheckBoxComponentMouseOverBehavior/>
                    </e:Interaction.Behaviors>
                </RadioButton>
                <CheckBox x:Name="ComponentCheckBox" Content="{Binding DisplayName}">
                    <e:Interaction.Behaviors>
                        <local:CheckBoxComponentMouseOverBehavior/>
                    </e:Interaction.Behaviors>
                </CheckBox>
            </Grid>
            <GroupBox x:Name="SubComponentsGroupBox" Header="{Binding DisplayName}">
                <ListView ItemsSource="{Binding SubComponents}" ItemContainerStyle="{DynamicResource ModConfiguratorComponentsListViewItemStyle}" ItemTemplate="{DynamicResource ModConfiguratorComponentTemplate}"/>
            </GroupBox>
        </Grid>
        <DataTemplate.Triggers>
            <!--DataTrigger Binding="{Binding GroupUnique, Converter={StaticResource StringIsComponentGroupNameConverter}}" Value="False">
                <Setter TargetName="ComponentCheckBox" Property="IsChecked" Value="{Binding Path=IsEnabled, Mode=TwoWay}"/>
            </DataTrigger-->
            <DataTrigger Binding="{Binding IsGroup}" Value="False">
                <Setter TargetName="SubComponentsGroupBox" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="BoxGrid" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <!--DataTrigger Binding="{Binding GroupUnique, Converter={StaticResource StringIsComponentGroupNameConverter}}" Value="True"-->
            <DataTrigger Binding="{Binding IsInGroup}" Value="False">
                <Setter TargetName="ComponentCheckBox" Property="IsChecked" Value="{Binding Path=IsEnabled, Mode=TwoWay}"/>
                <Setter TargetName="ComponentCheckBox" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ComponentRadioButton" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsInGroup}" Value="True">
                <Setter TargetName="ComponentRadioButton" Property="IsChecked" Value="{Binding Path=IsEnabled, Mode=TwoWay}"/>
                <Setter TargetName="ComponentRadioButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ComponentCheckBox" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ComponentRadioButton" Property="GroupName" Value="{Binding Path=Parent.Unique}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="ModConfiguratorComponentsListViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Type ListView}}">
        <Setter Property="MinWidth" Value="300"/>
        <Setter Property="ItemTemplate" Value="{DynamicResource ModConfiguratorComponentTemplate}"/>
        <Setter Property="Margin" Value="0,0,-14,0"/>
        <Setter Property="Panel.ZIndex" Value="999"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <DockPanel>
                        <Rectangle x:Name="RightShadow" DockPanel.Dock="Right" Width="14" IsHitTestVisible="False">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.875" StartPoint="0,0" EndPoint="1,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Grid>
                            <Border Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="{TemplateBinding DockPanel.Dock}">
                                <ScrollViewer>
                                    <ui:AttachedProperties.CornerCurves>
                                        <ui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                                    </ui:AttachedProperties.CornerCurves>
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Border>
                        </Grid>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ModConfiguratorComponentsListViewItemStyle}"/>
    </Style>

    <Style x:Key="HamburgerButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CaptionToggleButtonStyle}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Margin" Value="0,-30,0,0"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsLoaded, RelativeSource={RelativeSource Mode=Self}}" Value="True"/>
                    <Condition Binding="{Binding FallbackValue=True, Path=HasCustomWindowDecorations, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ManagerContent}}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Margin" Value="0"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HamburgerContentControlStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Width" Value="325"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="IsHitTestVisible" Value="{Binding IsManipulationEnabled, RelativeSource={RelativeSource Mode=Self}}"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid Width="{TemplateBinding ActualWidth}">
                        <StackPanel HorizontalAlignment="Right" Orientation="Horizontal" Margin="-9999999,30,0,0">
                            <Border x:Name="RootBorder" Style="{DynamicResource VerticalBarBorderStyle}" Width="{TemplateBinding ActualWidth}" BorderThickness="0,0,1,0" CornerRadius="0,0,0,3">
                                <ContentPresenter Content="{TemplateBinding Content}"/>
                            </Border>
                            <Rectangle x:Name="SliderRectangle" Width="{TemplateBinding ActualWidth}">
                                <Rectangle.LayoutTransform>
                                    <ScaleTransform ScaleX="1"/>
                                </Rectangle.LayoutTransform>
                            </Rectangle>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--Trigger Property="IsManipulationEnabled" Value="False">
                            <Setter Property="IsHitTestVisible" Value="False"/>
                        </Trigger-->
                        <Trigger Property="IsManipulationEnabled" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SliderRectangle" Storyboard.TargetProperty="LayoutTransform.ScaleX" To="0" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SliderRectangle" Storyboard.TargetProperty="LayoutTransform.ScaleX" To="1" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModConfiguratorModNameTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="InitialModConfiguratorContentControlStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid>
                        <Grid Margin="0,50">
                            <Rectangle VerticalAlignment="Top" Height="18" IsHitTestVisible="False">
                                <Rectangle.Fill>
                                    <LinearGradientBrush Opacity="0.75" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShadowGradientStops}"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle VerticalAlignment="Bottom" Height="9" IsHitTestVisible="False">
                                <Rectangle.Fill>
                                    <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Grid>
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ModConfiguratorContentControlStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource InitialModConfiguratorContentControlStyle}">
        <Setter Property="Margin" Value="0,-30,0,0"/>
    </Style>

    <Style x:Key="ModConfiguratorHeaderContentControlStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Height" Value="50"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!--Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0.75" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Offset="0" Color="#10000000"/>
                        <GradientStop Offset="1" Color="#40000000"/>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="3,3,0,0">
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="Top" CornerRadius="3,3,0,0">
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomInstallerFooterContentControlStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Height" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="Bottom" CornerRadius="0,0,3,3">
                        <ContentPresenter Content="{TemplateBinding Content}" Margin="5"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AutoCompleteComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton" Focusable="False" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="ui:AttachedProperties.CornerCurves" Value="{Binding Path=(ui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Padding" Value="0"/>
                                    <Setter Property="Margin" Value="0"/>
                                    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Grid>
                                                    <Border x:Name="IdleBackground" CornerRadius="3" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border x:Name="IdleInnerBackground" CornerRadius="2" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                                                    </Border>
                                                    <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                    </Border>
                                                    <DockPanel Margin="{Binding Padding, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ComboBox}}}">
                                                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0" Fill="{TemplateBinding Foreground}" Margin="5,0,0,0" DockPanel.Dock="Right" RenderTransformOrigin="0.5,0.5">
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="0"/>
                                                            </Path.RenderTransform>
                                                        </Path>
                                                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" Margin="0"/>
                                                    </DockPanel>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="-180" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground"
                                                         Storyboard.TargetProperty="Opacity" To="0"
                                                         Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                            <Grid VerticalAlignment="Stretch">
                                <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                                <Grid Margin="{Binding Padding, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}, Converter={StaticResource ThicknessInvertFilterConverter}, ConverterParameter=ltrb}" Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ComboBox}}}" VerticalAlignment="Stretch">
                                    <TextBox x:Name="PART_EditableTextBox" Margin="0,0,17,0" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" autocomp:AutoCompleteBehavior.AutoCompleteItemsSource="{TemplateBinding ItemsSource}">
                                        <ui:AttachedProperties.CornerCurves>
                                            <ui:CornerCurves TopLeft="True" TopRight="False" BottomRight="False" BottomLeft="True"/>
                                        </ui:AttachedProperties.CornerCurves>
                                    </TextBox>
                                </Grid>
                            </Grid>
                        </ToggleButton>
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Border x:Name="DropDownBorder" BorderThickness="1" UseLayoutRounding="True" Effect="{DynamicResource SecondaryDropShadow}" Margin="4,3,4,5">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Border.Background>
                                <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <ScrollViewer Padding="3,3,3,0" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEditable" Value="False">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CreditsListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0,0,0,-10"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <ItemsPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type local:CreditsItem}">
                    <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch">
                        <TextBlock Foreground="{DynamicResource WindowForegroundBrush}" Text="{Binding Name}" FontSize="16" FontWeight="Bold" HorizontalAlignment="Left" TextAlignment="Left" />
                        <TextBlock Foreground="{DynamicResource WindowForegroundBrush}" Text="{Binding Contribution}" TextWrapping="Wrap" HorizontalAlignment="Left" TextAlignment="Left"/>
                        <StackPanel x:Name="LinkAreaStackPanel" Orientation="Horizontal" Opacity="0.5">
                            <TextBlock Foreground="{DynamicResource WindowForegroundBrush}" Text="Click to visit " TextWrapping="NoWrap" HorizontalAlignment="Left" TextAlignment="Left"/>
                            <TextBlock Foreground="{DynamicResource WindowForegroundBrush}" Text="{Binding Link}" TextWrapping="Wrap" HorizontalAlignment="Left" TextAlignment="Left"/>
                        </StackPanel>
                        <Rectangle HorizontalAlignment="Stretch" Margin="40,5,40,0" Height="5">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource SeparatorFillGradientStops}"/>
                            </Rectangle.Fill>
                            <Rectangle.OpacityMask>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0" GradientStops="{DynamicResource SeparatorMaskGradientStops}"/>
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </StackPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Link}" Value="{x:Static sys:String.Empty}">
                            <Setter TargetName="LinkAreaStackPanel" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FolderNotFoundListViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Type ListView}}">
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ListViewItemStyle}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type core:DetectionFailureGuessFolder}">
                    <StackPanel Orientation="Vertical">
                        <TextBlock x:Name="PathTypeTextBlock" FontSize="16" FontWeight="Bold" HorizontalAlignment="Left" TextAlignment="Left" Text="{DynamicResource FolderNotFoundUnknown}"/>
                        <TextBlock Text="{Binding GuessPath}" TextWrapping="Wrap" HorizontalAlignment="Left" TextAlignment="Left"/>
                    </StackPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding GuessType}" Value="Disk">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource ProbablyDisksGuessText}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="Origin">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource ProbablyOriginGuessText}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="OriginPatched">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource ProbablyOriginGuessText}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="Steam">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource ProbablyGOGGuessText}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="SteamPatched">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource ProbablyGOGGuessText}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LanguagesComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton" Focusable="False" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Right" Width="18" ui:AttachedProperties.CornerCurves="False,True,True,False">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Padding" Value="0"/>
                                    <Setter Property="Margin" Value="0"/>
                                    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <Grid>
                                                    <Border x:Name="IdleBackground" CornerRadius="0,3,3,0" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border x:Name="IdleInnerBackground" CornerRadius="0,2,2,0" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                                                    </Border>
                                                    <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                    </Border>
                                                    <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                                        <Path.RenderTransform>
                                                            <RotateTransform Angle="0"/>
                                                        </Path.RenderTransform>
                                                    </Path>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="-180" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground"
                                                         Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground"
                                                         Storyboard.TargetProperty="Opacity" To="0"
                                                         Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                            <Grid VerticalAlignment="Stretch">
                                <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                                <Grid Margin="{Binding Padding, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}, Converter={StaticResource ThicknessInvertFilterConverter}, ConverterParameter=ltrb}" Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ComboBox}}}" VerticalAlignment="Stretch">
                                    <TextBox x:Name="PART_EditableTextBox" Margin="0,0,17,0" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" autocomp:AutoCompleteBehavior.AutoCompleteItemsSource="{TemplateBinding ItemsSource}">
                                        <ui:AttachedProperties.CornerCurves>
                                            <ui:CornerCurves TopLeft="True" TopRight="False" BottomRight="False" BottomLeft="True"/>
                                        </ui:AttachedProperties.CornerCurves>
                                    </TextBox>
                                </Grid>
                            </Grid>
                        </ToggleButton>
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Border x:Name="DropDownBorder" BorderThickness="1" UseLayoutRounding="True" Effect="{DynamicResource SecondaryDropShadow}" Margin="4,3,4,5">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Border.Background>
                                <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <ScrollViewer Padding="3,3,3,0" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEditable" Value="False">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>