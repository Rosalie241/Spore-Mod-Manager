<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:cui="clr-namespace:SporeMods.CommonUI"
			xmlns:core="clr-namespace:SporeMods.Core;assembly=SporeMods.Core"
			xmlns:mods="clr-namespace:SporeMods.Core.Mods;assembly=SporeMods.Core"
			xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
			xmlns:conv="clr-namespace:SporeMods.CommonUI"
			xmlns:shale="clr-namespace:SporeMods.CommonUI.Themes.Shale"
			xmlns:uib="clr-namespace:SporeMods.CommonUI"
			xmlns:autocomp="clr-namespace:WPFTextBoxAutoComplete;assembly=WPFTextBoxAutoComplete"
			xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Control/ActionBox.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Control/Button.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Control/Window.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Control/ListView.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <conv:IconToImageBrushConverter x:Key="IconToImageBrushConverter"/>
    
    <Grid x:Key="NoIconModIcon" x:Shared="False" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center">
        <Ellipse Stroke="{DynamicResource ButtonIdleBorderBrush}" StrokeThickness="1">
            <Ellipse.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
            </Ellipse.Fill>
        </Ellipse>
        <Ellipse Margin="2">
            <Ellipse.Fill>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonBackgroundGradientStops}"/>
            </Ellipse.Fill>
        </Ellipse>
        <TextBlock Text="?" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" Foreground="{DynamicResource ButtonForegroundBrush}" FontSize="15" FontWeight="Black" Effect="{DynamicResource DropShadow}"/>
    </Grid>


    <ControlTemplate x:Key="AlertIconBackgroundTemplate">
        <Grid Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource DropShadow}">
            <Path Data="M 0 32 L 16 0 L 32 32 Z" Stroke="{DynamicResource RedButtonBorderBrush}" StrokeThickness="1">
                <Path.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource RedButtonBackgroundGradientStops}"/>
                </Path.Fill>
            </Path>
            <Path Data="M 0 26 L 13 0 L 26 26 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,1,0,-1">
                <Path.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource RedButtonSecondaryBackgroundGradientStops}"/>
                </Path.Fill>
            </Path>
        </Grid>
    </ControlTemplate>


    <Style x:Key="ModListProgressDisplayStyle" TargetType="Control">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <TextBlock x:Name="TaskStateTextBlock" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Left" Text="{DynamicResource Mods!ListEntry!Tasks!Install}" Margin="0,0,5,0"/>
                        <ProgressBar x:Name="ModProgressBar" Width="100" Height="23" Value="{Binding Progress, Mode=OneWay}" Minimum="0" Maximum="{Binding ProgressTotal, Mode=OneWay}" VerticalAlignment="Stretch"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Status}" Value="Indeterminate">
                            <Setter TargetName="ModProgressBar" Property="IsIndeterminate" Value="True"/>
                            <Setter TargetName="TaskStateTextBlock" Property="Text" Value="{DynamicResource Mods!ListEntry!Tasks!Pending}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Category}" Value="Upgrade">
                            <Setter TargetName="TaskStateTextBlock" Property="Text" Value="{DynamicResource Mods!ListEntry!Tasks!Update}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Category}" Value="Reconfigure">
                            <Setter TargetName="TaskStateTextBlock" Property="Text" Value="{DynamicResource Mods!ListEntry!Tasks!Reconfigure}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Category}" Value="Uninstall">
                            <Setter TargetName="TaskStateTextBlock" Property="Text" Value="{DynamicResource Mods!ListEntry!Tasks!Uninstall}"/>
                        </DataTrigger>
                        <Trigger SourceName="ModProgressBar" Property="IsIndeterminate" Value="True">
                            <Setter TargetName="ModProgressBar" Property="Template" Value="{DynamicResource TemporaryIndeterminateProgressBarTemplate}"/>
                            <Setter TargetName="ModProgressBar" Property="Background" Value="#00FF00"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Category}" Value="Rollback">
                            <Setter TargetName="ModProgressBar" Property="IsIndeterminate" Value="True"/>
                            <Setter TargetName="ModProgressBar" Property="Background" Value="#FF0000"/>
                            <Setter TargetName="TaskStateTextBlock" Property="Text" Value="{DynamicResource Mods!ListEntry!Tasks!Rollback}"/>
                            <Setter TargetName="TaskStateTextBlock" Property="Foreground" Value="{DynamicResource ErrorTextBrush}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="InstalledModsListViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource {x:Type ListView}}">
        <Style.Resources>
            <CubicEase x:Key="ScalingEase" EasingMode="EaseOut"/>
            <DataTemplate DataType="{x:Type mods:ManagedMod}">
                <DockPanel>
                    <DockPanel x:Name="ModRootDockPanel" Height="42" DockPanel.Dock="Top">
                        <!--Height="{Binding Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}"-->
                        <Grid x:Name="StatusGrid" Margin="0,0,5,0" DockPanel.Dock="Right">
                            <Grid.RenderTransform>
                                <TranslateTransform X="0"/>
                            </Grid.RenderTransform>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <TextBlock Text="{Binding ModVersion}" Visibility="{Binding ModHasVersion, Converter={StaticResource BooleanToVisibilityConverter}}" Margin="15,0" VerticalAlignment="Center"/>
                                <!--ui:ToggleSwitch x:Name="IsEnabledToggleSwitch" TrueText="{DynamicResource ModSwitchOnText}" FalseText="{DynamicResource ModSwitchOffText}" Content="{x:Null}" IsChecked="{Binding IsEnabled, FallbackValue=True}" Visibility="{Binding Source={x:Static core:Settings.DeveloperMode}, Converter={StaticResource BooleanToVisibilityConverter}}" VerticalAlignment="Center" Width="110" MinWidth="110" HorizontalAlignment="Right"/-->
                                <!--{Binding CanDisable, Converter={StaticResource BooleanToVisibilityConverter}}-->
                                <Control x:Name="ProgressDisplay" Visibility="Collapsed"/>
                            </StackPanel>
                        </Grid>
                        <!--ui:ToggleSwitch x:Name="IsEnabledToggleSwitch" IsChecked="{Binding IsEnabled}" TrueText="{DynamicResource ModSwitchOn}" FalseText="{DynamicResource ModSwitchOff}" VerticalAlignment="Center" IsThreeState="False" DockPanel.Dock="Right"/-->
                        <!--mod:ToggleSwitch.Style>
													<Style TargetType="{x:Type mod:ToggleSwitch}" BasedOn="{StaticResource {x:Type mod:ToggleSwitch}}">
														<EventSetter Event="Checked" Handler="ModToggleSwitch_Checked"/>
													</Style>
												</mod:ToggleSwitch.Style-->
                        <Grid x:Name="IconGrid" Width="{Binding Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DockPanel}}}" Height="{Binding Width, RelativeSource={RelativeSource Mode=Self}}" Margin="2,0" DockPanel.Dock="Left">
                            <Rectangle x:Name="IconEdgeShadowRectangle" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="5" Margin="0,5,-2,5">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0" GradientStops="{DynamicResource SeparatorFillGradientStops}"/>
                                </Rectangle.Fill>
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource SeparatorMaskGradientStops}"/>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <ContentPresenter x:Name="IconContainer" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Effect="{DynamicResource DropShadow}">
                                <ContentPresenter.Content>
                                    <Canvas x:Name="IconCanvas" HorizontalAlignment="Center" VerticalAlignment="Center" Width="32" Height="32" Background="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}}"/>
                                </ContentPresenter.Content>
                            </ContentPresenter>
                        </Grid>
                        <ToggleButton x:Name="ExpandCollapseToggleButton" Visibility="Collapsed" Style="{DynamicResource DropdownToggleButtonStyle}" DockPanel.Dock="Right" Margin="5,0,0,0">
                            <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 6 L 6 0 L 12 6" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="-180"/>
                                </Path.RenderTransform>
                            </Path>
                        </ToggleButton>
                        <Grid Visibility="{Binding Identity.CausesSaveDataDependency, Converter={StaticResource BooleanToVisibilityConverter}}" Width="32" Height="32" Background="#01000000" ToolTip="{DynamicResource Mods!ListEntry!CausesSaveDataDependency}" DockPanel.Dock="Right">
                            <Control Template="{DynamicResource AlertIconBackgroundTemplate}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Grid Width="12" Height="12" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource DropShadow}" Margin="0,6,0,-6">
                                <Path Data="M 0 6 L 6 0" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,2,0,-2">
                                    <Path.Stroke>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops3}"/>
                                    </Path.Stroke>
                                </Path>
                                <Ellipse Width="8" Height="8" HorizontalAlignment="Right" VerticalAlignment="Top">
                                    <Ellipse.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>
                                    </Ellipse.Fill>
                                </Ellipse>
                                <Ellipse Width="4" Height="4" HorizontalAlignment="Left" VerticalAlignment="Bottom">
                                    <Ellipse.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>
                                    </Ellipse.Fill>
                                </Ellipse>
                            </Grid>
                            <!--{DynamicResource ButtonForegroundBrush}-->
                        </Grid>
                        <!--Rectangle DockPanel.Dock="Left" Width="{Binding Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DockPanel}}, Converter={StaticResource WidthToHalfWidthConverter}}"/-->
                        <TextBlock x:Name="DisplayNameTextBlock" Margin="5,0,0,0" Text="{Binding DisplayName}" VerticalAlignment="Center" TextAlignment="Left" HorizontalAlignment="Left"/>
                    </DockPanel>
                    <StackPanel x:Name="DescriptionGrid" Orientation="Vertical" Visibility="{Binding Visibility, ElementName=ExpandCollapseToggleButton}">
                        <!--MaxWidth="{Binding ActualWidth, ElementName=ModRootDockPanel}"-->
                        <StackPanel.LayoutTransform>
                            <ScaleTransform ScaleY="0"/>
                        </StackPanel.LayoutTransform>
                        <Rectangle x:Name="DescriptionSeparator" HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="40,0" Height="5">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource SeparatorFillGradientStops}"/>
                            </Rectangle.Fill>
                            <Rectangle.OpacityMask>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0" GradientStops="{DynamicResource SeparatorMaskGradientStops}"/>
                            </Rectangle.OpacityMask>
                        </Rectangle>
                        <!--Fill="{DynamicResource HorizontalPanelBorderBrush}"/-->
                        <cui:NoSizeDecorator>
                            <TextBlock Text="{Binding Description}" TextWrapping="Wrap" HorizontalAlignment="Left" Padding="5" Width="{Binding ActualWidth, ElementName=ModRootDockPanel}" ClipToBounds="False"/>
                        </cui:NoSizeDecorator>
                    </StackPanel>
                </DockPanel>
                <DataTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsProgressing}" Value="True"/>
                            <Condition Binding="{Binding ProgressSignifier.IsConcluded}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="ProgressDisplay" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="ProgressDisplay" Property="DataContext" Value="{Binding ProgressSignifier}"/>
                        <Setter TargetName="ProgressDisplay" Property="Style" Value="{DynamicResource ModListProgressDisplayStyle}"/>
                    </MultiDataTrigger>
                    <DataTrigger Binding="{Binding HasDescription}" Value="True">
                        <Setter TargetName="ExpandCollapseToggleButton" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                    <Trigger SourceName="ExpandCollapseToggleButton" Property="IsChecked" Value="True">
                        <Setter Property="ToolTip" Value="{DynamicResource Mods!ListEntry!MoreInfo!Collapse}"/>
                    </Trigger>
                    <Trigger SourceName="ExpandCollapseToggleButton" Property="IsChecked" Value="False">
                        <Setter Property="ToolTip" Value="{DynamicResource Mods!ListEntry!MoreInfo!Expand}"/>
                    </Trigger>
                    <DataTrigger Binding="{Binding IsChecked, ElementName=ExpandCollapseToggleButton}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125"/>
                                    <DoubleAnimation Storyboard.TargetName="DescriptionGrid" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="1" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="-180" Duration="0:0:0.125"/>
                                    <DoubleAnimation Storyboard.TargetName="DescriptionGrid" Storyboard.TargetProperty="LayoutTransform.ScaleY" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="True">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <!--DoubleAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Height" To="50" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                    <!--DoubleAnimation Storyboard.TargetName="StatusGrid" Storyboard.TargetProperty="RenderTransform.X" To="-5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->

                                    <ThicknessAnimation Storyboard.TargetName="IconGrid" Storyboard.TargetProperty="Margin" To="2,0,7,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <ThicknessAnimation Storyboard.TargetName="IconEdgeShadowRectangle" Storyboard.TargetProperty="Margin" To="0,0,-7,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <ThicknessAnimation Storyboard.TargetName="DescriptionSeparator" Storyboard.TargetProperty="Margin" To="35,5,35,-5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <!--ThicknessAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Margin" To="-5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                    <!--DoubleAnimation Storyboard.TargetName="IsEnabledToggleSwitch" Storyboard.TargetProperty="Width" To="105" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <!--DoubleAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Height" To="40" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                    <!--DoubleAnimation Storyboard.TargetName="StatusGrid" Storyboard.TargetProperty="RenderTransform.X" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->

                                    <ThicknessAnimation Storyboard.TargetName="IconGrid" Storyboard.TargetProperty="Margin" To="2,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <ThicknessAnimation Storyboard.TargetName="IconEdgeShadowRectangle" Storyboard.TargetProperty="Margin" To="0,5,-2,5" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <ThicknessAnimation Storyboard.TargetName="DescriptionSeparator" Storyboard.TargetProperty="Margin" To="40,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
                                    <!--ThicknessAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Margin" To="0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                    <!--DoubleAnimation Storyboard.TargetName="IsEnabledToggleSwitch" Storyboard.TargetProperty="Width" To="100" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/-->
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Icon}" Value="{x:Null}">
                        <!--Setter TargetName="IconContainer" Property="Content" Value="{DynamicResource NoIconModIcon}"/-->
                        <Setter TargetName="IconGrid" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="DisplayNameTextBlock" Property="Margin" Value="10,0,0,0"/>
                    </DataTrigger>
                    <!--DataTrigger Binding="{Binding IsProgressing}" Value="True">
							<Setter TargetName="StatusGrid" Property="Width" Value="200"/>
							<Setter TargetName="TaskStateTextBlock" Property="Visibility" Value="Visible"/>
							<Setter TargetName="ModProgressBar" Property="Visibility" Value="Visible"/>
						</DataTrigger-->
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate DataType="{x:Type mods:ManualInstalledFile}">
                <DockPanel x:Name="ModRootDockPanel" Height="42" Margin="10,0">
                    <!--Grid Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center">
						<Path Data="M 0 0 L 15 0 L 20 5 L 20 24 L 0 24 Z" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}"/>
						<Path Data="M 0 0 L 0 6 L 6 6 Z" HorizontalAlignment="Right" VerticalAlignment="Top" StrokeThickness="0" Fill="{DynamicResource IconSecondaryFillBrush}" Effect="{DynamicResource IconInnerShadow}"/>
						<TextBlock Text="!" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" Foreground="{DynamicResource SelectedHighlightBrush}" Effect="{DynamicResource IconOuterShadow}" FontSize="15" FontWeight="Black"/>
					</Grid-->
                    <TextBlock Text="{DynamicResource Mods!ListEntry!ManuallyInstalled}" TextAlignment="Right" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="10,0,0,0" Foreground="{DynamicResource ErrorTextBrush}" DockPanel.Dock="Right"/>
                    <!--TextBlock.Foreground>
						<LinearGradientBrush StartPoint="0,0" EndPoint="0,0" GradientStops="{DynamicResource RedIconGradientStops}"/>
					</TextBlock.Foreground-->
                    <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center" TextAlignment="Left" HorizontalAlignment="Left"/>
                </DockPanel>
                <!--DataTemplate.Triggers>
					<DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="True">
						<DataTrigger.EnterActions>
							<BeginStoryboard>
								<Storyboard>
									<ThicknessAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Margin" To="5,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
								</Storyboard>
							</BeginStoryboard>
						</DataTrigger.EnterActions>
						<DataTrigger.ExitActions>
							<BeginStoryboard>
								<Storyboard>
									<ThicknessAnimation Storyboard.TargetName="ModRootDockPanel" Storyboard.TargetProperty="Margin" To="10,0" Duration="0:0:0.125" EasingFunction="{StaticResource ScalingEase}"/>
								</Storyboard>
							</BeginStoryboard>
						</DataTrigger.ExitActions>
					</DataTrigger>
				</DataTemplate.Triggers-->
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ScrollViewer">
                            <!--uib:ScrollAnimationBehavior.IsEnabled="{TemplateBinding uib:ScrollAnimationBehavior.IsEnabled}"
									uib:ScrollAnimationBehavior.TimeDuration="{TemplateBinding uib:ScrollAnimationBehavior.TimeDuration}"
									uib:ScrollAnimationBehavior.EasingFunction="{TemplateBinding uib:ScrollAnimationBehavior.EasingFunction}"-->
                            <cui:AttachedProperties.CornerCurves>
                                <cui:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                            </cui:AttachedProperties.CornerCurves>
                            <Border x:Name="ItemsPresenterBorder" Background="#01000000">
                                <e:Interaction.Behaviors>
                                    <uib:DeselectOnClickBlankBehavior ItemsPresenterElement="{Binding Source={x:Reference ItemsPresenter}}"/>
                                </e:Interaction.Behaviors>
                                <ItemsPresenter x:Name="ItemsPresenter"/>
                            </Border>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource CardListViewItemStyle}"/>
    </Style>

    <Style x:Key="DropdownToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CaptionButtonBaseStyle}">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Margin" Value="0"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}, FallbackValue=False}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
            </MultiDataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ModsListTopZoneStyle" TargetType="{x:Type cui:Zone}">
        <Setter Property="Height" Value="40"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cui:Zone}">
                    <Grid>
                        <Rectangle VerticalAlignment="Bottom" Height="18" IsHitTestVisible="False" Margin="0,-18">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.75" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border x:Name="BackgroundBorder" Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="Top">
                            <ContentPresenter Content="{TemplateBinding Content}" Margin="5"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Canvas x:Key="SearchGoIcon" x:Shared="False" Width="16" Height="16">
        <Path Data="M 0 7 L 7 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Canvas.Top="9"/>
        <Ellipse Width="11" Height="11" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Canvas.Left="5"/>
    </Canvas>
    <Path x:Key="SearchCancelIcon" x:Shared="False" Width="16" Height="16" Data="M 0 0 L 16 16 M 0 16 L 16 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" StrokeThickness="2"/>
    <Style x:Key="SearchBoxStyle" TargetType="{x:Type cui:ActionBox}" BasedOn="{StaticResource {x:Type cui:ActionBox}}">
        <Setter Property="Height" Value="29"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="ButtonContent" Value="{DynamicResource SearchCancelIcon}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="ButtonContent" Value="{DynamicResource SearchGoIcon}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Path x:Key="SearchTargetsToggleButtonIcon" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0" Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" RenderTransformOrigin="0.5,0.5">
        <!--{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}-->
        <Path.RenderTransform>
            <RotateTransform Angle="0"/>
        </Path.RenderTransform>
        <Path.Style>
            <Style TargetType="Path">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}">
                        <DataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" To="180" Duration="0:0:0.125" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125" />
                                </Storyboard>
                            </BeginStoryboard>
                        </DataTrigger.ExitActions>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Path.Style>
    </Path>
    <Style x:Key="SearchTargetsToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Content" Value="{DynamicResource SearchTargetsToggleButtonIcon}"/>
    </Style>



    <Style x:Key="InstallModsPromptZoneStyle" TargetType="{x:Type cui:Zone}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cui:Zone}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.ColumnSpan="4" TextElement.Foreground="{DynamicResource WindowForegroundBrush}"/>
                        <Path x:Name="ArrowHintPath" Data="M 15 0 L 14 50 L 0 35 L 15 50 L 30 35 L 16 50 Z" Stroke="{DynamicResource WindowForegroundBrush}" StrokeThickness="3" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="20,0">
                            <Path.RenderTransform>
                                <TranslateTransform x:Name="HowToArrowTranslateTransform0" X="0" Y="-20"/>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ArrowHintPath" Storyboard.TargetProperty="RenderTransform.Y" From="-20" To="0" Duration="0:0:0.500" RepeatBehavior="Forever" AutoReverse="True">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OngoingTasksListContentControlStyle" TargetType="{x:Type cui:AnimatableContentControl}">
        <Setter Property="Width" Value="375"/>
        <Setter Property="Margin" Value="5,5,5,-11"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cui:AnimatableContentControl}">
                    <Grid x:Name="ContentGrid" RenderTransformOrigin="0.92,1">
                        <Grid.RenderTransform>
                            <ScaleTransform ScaleX="0" ScaleY="{Binding ScaleX, RelativeSource={RelativeSource Mode=Self}}"/>
                        </Grid.RenderTransform>
                        <DockPanel Effect="{DynamicResource TertiaryDropShadow}">
                            <Path Data="M 0 0 L 10 16 L 20 0 Z" DockPanel.Dock="Bottom" HorizontalAlignment="Right" Margin="20,0">
                                <Path.Fill>
                                    <LinearGradientBrush StartPoint="0,-1" EndPoint="0,0" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Path.Fill>
                            </Path>
                            <Border x:Name="ContentPaneBorder" CornerRadius="3" BorderBrush="Transparent" UseLayoutRounding="True">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                        </DockPanel>
                        <DockPanel>
                            <Button x:Name="PART_CloseButton" Content="{DynamicResource AnimatableContentControlCloseButtonIcon}" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding HasCloseButton, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" DockPanel.Dock="Top" Panel.ZIndex="99999999">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Width" Value="45"/>
                                        <Setter Property="Height" Value="31"/>
                                        <Setter Property="Foreground" Value="{DynamicResource WindowForegroundBrush}"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Button">
                                                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#01000000" BorderBrush="{DynamicResource TitlebarBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                                        <DockPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Effect="{DynamicResource DropShadow}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True" UseLayoutRounding="True">
                                                            <ContentPresenter x:Name="IconPresenter" Content="{Binding Path=(cui:AttachedProperties.Icon), RelativeSource={RelativeSource Mode=TemplatedParent}}" TextElement.Foreground="{TemplateBinding Foreground}" TextElement.FontFamily="{TemplateBinding FontFamily}" TextElement.FontSize="{TemplateBinding FontSize}" Margin="0,0,4,0"/>
                                                            <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" TextElement.Foreground="{TemplateBinding Foreground}" TextElement.FontFamily="{TemplateBinding FontFamily}" TextElement.FontSize="{TemplateBinding FontSize}" Margin="0"/>
                                                        </DockPanel>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="cui:AttachedProperties.Icon" Value="{x:Null}">
                                                            <Setter TargetName="IconPresenter" Property="Visibility" Value="Collapsed"/>
                                                        </Trigger>
                                                        <Trigger Property="Content" Value="{x:Null}">
                                                            <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed"/>
                                                            <Setter TargetName="IconPresenter" Property="Margin" Value="0"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Opacity" Value="0.5"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                            <ContentPresenter Content="{TemplateBinding Content}" Margin="0,0,0,16"/>
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOpen" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger SourceName="ContentGrid" Property="Opacity" Value="0">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
