<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:cui="clr-namespace:SporeMods.CommonUI"
					xmlns:core="clr-namespace:SporeMods.Core;assembly=SporeMods.Core"
					xmlns:mods="clr-namespace:SporeMods.Core.Mods;assembly=SporeMods.Core"
					xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
					xmlns:shale="clr-namespace:SporeMods.CommonUI.Themes.Shale"
					xmlns:sys="clr-namespace:System;assembly=mscorlib">
                    <!--xmlns:autocomp="clr-namespace:WPFTextBoxAutoComplete;assembly=WPFTextBoxAutoComplete"-->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Shale.xaml"/>
        
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Smm/Mods.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Smm/Settings.xaml"/>

        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Smm/Modals.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <cui:IconToImageBrushConverter x:Key="IconToImageBrushConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <cui:DoubleComparisonConverter x:Key="DoubleComparisonConverter"/>

    <Style x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style x:Key="{x:Type ContentPresenter}" TargetType="{x:Type ContentPresenter}">
        <Style.Resources>
            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}"/>
        </Style.Resources>
    </Style>


    <cui:BorderPresenceToThicknessConverter x:Key="BorderPresenceToThicknessConverter"/>
    <cui:CornerCurvesToCornerRadiusConverter x:Key="CornerCurvesToCornerRadiusConverter"/>
    <cui:IsAllTrueConverter x:Key="IsAllTrueConverter"/>


    <sys:Double x:Key="SettingsControlsVerticalSpacing">5</sys:Double>
    <sys:Double x:Key="SettingsControlsHorizontalSpacing">5</sys:Double>
    
    <sys:Double x:Key="SubControlsInset">15</sys:Double>
    <Thickness x:Key="SubControlsInsetMargin">15,0,0,0</Thickness>





    <LinearGradientBrush x:Key="TopDownMaskBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="Black"/>
        <GradientStop Offset="1" Color="#00000000"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="FromLeftMaskBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0" Color="Black"/>
        <GradientStop Offset="1" Color="#00000000"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="FromRightMaskBrush" StartPoint="1,0" EndPoint="0,0">
        <GradientStop Offset="0" Color="Black"/>
        <GradientStop Offset="1" Color="#00000000"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="BottomUpMaskBrush" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Offset="0" Color="Black"/>
        <GradientStop Offset="1" Color="#00000000"/>
    </LinearGradientBrush>

    





    <!--Style x:Key="ToolstripButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Margin" Value="0,0,5,0"/>
    </Style-->

    <Style x:Key="MainWindowFooterZoneStyle" TargetType="{x:Type cui:Zone}">
        <Style.Resources>
            <sys:Double x:Key="MainWindowFooterSpacing">5</sys:Double>
        </Style.Resources>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <!--Setter Property="SnapsToDevicePixels" Value="True"/-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cui:Zone}">
                    <cui:FloorPanel>
                        <Rectangle VerticalAlignment="Top" Height="9" IsHitTestVisible="False" Margin="0,-9">
                            <Rectangle.Fill>
                                <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border x:Name="BackgroundBorder" Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="Bottom">
                            <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </cui:FloorPanel>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(cui:WindowChromeHelper.UseCustomDecorations), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Value="True"/>
                                <Condition Binding="{Binding WindowState, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, FallbackValue=Maximized}" Value="Normal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BackgroundBorder" Property="CornerRadius" Value="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='0,0,7,7;0'}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style x:Key="FooterButtonStyle" TargetType="{x:Type Button}">
        
    </Style-->
    
    <LinearGradientBrush x:Key="IconBackground1" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>
    <LinearGradientBrush x:Key="IconBackground2" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops2}"/>
    <Thickness x:Key="IconGap">5,0,0,0</Thickness>

    
    <Style x:Key="InstallModsButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderBrush" Value="{DynamicResource InstallModsButtonBorderBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DockPanel x:Name="Root">
                        <cui:FloorPanel x:Name="ButtonIcon"
                                        Width="32"
                                        Height="24"
                                        VerticalAlignment="Center"
                                        Margin="0,-1,0,1"
                                        Effect="{DynamicResource DropShadow}"
                                        UseLayoutRounding="True"
                                        DockPanel.Dock="Left">
                            <!--Path Fill="{DynamicResource IconBackground1}"
                                Data="M 14.857142 23.500001 V 13.346156 L 5.0000001 9.1153843 V 19.269229 Z"/>
                            <Path Fill="{DynamicResource IconBackground1}"
                                Data="M 18.142857 23.500001 V 13.346156 L 28 9.1153843 V 19.269229 Z"/>
                            <Path Fill="{DynamicResource IconBackground1}"
                                Data="M 16.500001 11.653849 28 6.5769202 16.500001 1.5 5.0000001 6.5769202 Z"/-->
                            <!--Path Fill="{DynamicResource IconBackground1}"
                                Data="M 14.857142 22.500001 V 12.346156 L 5.0000001 8.1153843 V 18.269229 Z"/>
                            <Path Fill="{DynamicResource IconBackground1}"
                                Data="M 18.142857 22.500001 V 12.346156 L 28 8.1153843 V 18.269229 Z"/>
                            <Path Fill="{DynamicResource IconBackground1}"
                                Data="M 16.500001 10.653849 28 5.5769202 16.500001 0.5 5.0000001 5.5769202 Z"/-->


                            <!--Path Fill="{DynamicResource IconBackground2}"
                                Data="M 0 23 M 0 0 M 14.857142 23.000001 V 12.346156 L 5.0000001 8.1153843 V 18.269229 Z"
                                VerticalAlignment="Stretch"
                                Stretch="None"/>
                            <Path Fill="{DynamicResource IconBackground2}"
                                Data="M 0 23 M 0 0 M 18.142857 23.000001 V 12.346156 L 28 8.1153843 V 18.269229 Z"
                                VerticalAlignment="Stretch"
                                Stretch="None"/-->
                            <Path Fill="{DynamicResource IconBackground2}"
                                Data="M 0 23 M 0 0 M 14.857142 23.000001 V 15.346156 L 5.0000001 11.1153843 V 18.269229 Z"
                                VerticalAlignment="Stretch"
                                Stretch="None"/>
                            <Path Fill="{DynamicResource IconBackground2}"
                                Data="M 0 23 M 0 0 M 18.142857 23.000001 V 15.346156 L 28 11.1153843 V 18.269229 Z"
                                VerticalAlignment="Stretch"
                                Stretch="None"/>
                            <Path Fill="{DynamicResource IconBackground1}"
                                Stretch="None"
                                Data="m 9.6648325 2.590412 c 0 0 -9.62048909 7.409238 -1.2259425 14.668821 4.390996 3.797251 15.468624 2.670307 13.055215 -6.336327 4.040175 6.99765 -1.366127 13.131074 -9.615273 11.562283 0 0 11.226997 4.626841 13.316799 -6.272762 1.093128 -5.70123 -5.421723 -14.731074 -12.015114 -8.137755 4.040175 -6.997658 12.055139 -5.382461 14.821031 2.545755 0 0 -1.606432 -12.03608 -12.090856 -8.396063 C 10.426643 4.12834 5.8638286 14.285135 14.870629 16.69845 6.7902777 16.69845 4.1816537 8.949832 9.6648325 2.590412 Z"
                                Clip="M 16.500001 14.153849 28 9.0769202 28 0 5.0000001 0 5.0000001 9.0769202 Z"/>
                            <!--Path Fill="{DynamicResource IconBackground1}"
                                Data="M 0 23 M 0 0 M 16.500001 11.153849 28 6.0769202 16.500001 1 5.0000001 6.0769202 Z"
                                VerticalAlignment="Stretch"
                                Stretch="None"/-->
                            <!--Path Fill="{DynamicResource IconBackground1}"
                                Data="M 16.500001 11.153849 28 6.0769202 28 0 5.0000001 0 5.0000001 6.0769202 Z"
                                VerticalAlignment="Stretch"
                                Stretch="None"/-->
                        </cui:FloorPanel>
                        <cui:NoSizeDecorator x:Name="ButtonText">
                            <TextBlock Text="{Binding}"
                                    Margin="{DynamicResource IconGap}"
                                    VerticalAlignment="Center"/>
                        </cui:NoSizeDecorator>
                    </DockPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='le136'}" Value="True">
                            <Setter TargetName="ButtonText" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Root" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="Root" Property="ToolTip" Value="{Binding}"/>
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ButtonIcon" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ConfigureModButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderBrush" Value="{DynamicResource ConfigureModButtonBorderBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DockPanel x:Name="Root">
                        <cui:FloorPanel x:Name="ButtonIcon"
                                        Width="32"
                                        VerticalAlignment="Center"
                                        Effect="{DynamicResource DropShadow}"
                                        UseLayoutRounding="True"
                                        DockPanel.Dock="Left">
                            <Path Fill="{DynamicResource IconBackground1}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Margin="0.484,0"
                                Data="M 11 0 9.417969 4.7441406 A 9 9 0 0 0 7.642578 5.7695312 l -4.90039 -1.0019531 -2 3.4648438 3.316406 3.7421871 A 9 9 0 0 0 4 13 9 9 0 0 0 4.06055 14.025391 l -3.318359 3.742187 2 3.464844 4.90039 -1.001953 a 9 9 0 0 0 1.775391 1.02539 L 11 26 h 4 l 1.582031 -4.742188 a 9 9 0 0 0 1.775391 -1.027343 l 4.90039 1.001953 2 -3.464844 -3.316406 -3.742187 A 9 9 0 0 0 22 13 9 9 0 0 0 21.94141 11.972656 l 3.316406 -3.7402341 -2 -3.4648438 -4.90039 1.0019531 A 9 9 0 0 0 16.582031 4.7441406 L 15 0 Z"/>
                                <!--M 11 0 9.417969 4.7441406 A 9 9 0 0 0 7.642578 5.7695312 l -4.90039 -1.0019531 -2 3.4648438 3.316406 3.7421871 A 9 9 0 0 0 4 13 9 9 0 0 0 4.06055 14.025391 l -3.318359 3.742187 2 3.464844 4.90039 -1.001953 a 9 9 0 0 0 1.775391 1.02539 L 11 26 h 4 l 1.582031 -4.742188 a 9 9 0 0 0 1.775391 -1.027343 l 4.90039 1.001953 2 -3.464844 -3.316406 -3.742187 A 9 9 0 0 0 22 13 9 9 0 0 0 21.94141 11.972656 l 3.316406 -3.7402341 -2 -3.4648438 -4.90039 1.0019531 A 9 9 0 0 0 16.582031 4.7441406 L 15 0 Z-->
                            <Ellipse Width="10"
                                    Height="10"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Fill="{DynamicResource IconBackground2}"/>
                        </cui:FloorPanel>
                        <cui:NoSizeDecorator x:Name="ButtonText">
                            <TextBlock Text="{Binding}"
                                    Margin="{DynamicResource IconGap}"
                                    VerticalAlignment="Center"/>
                        </cui:NoSizeDecorator>
                    </DockPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='le136'}" Value="True">
                            <Setter TargetName="ButtonText" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Root" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="Root" Property="ToolTip" Value="{Binding}"/>
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ButtonIcon" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="UninstallModsButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderBrush" Value="{DynamicResource UninstallModsButtonBorderBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DockPanel x:Name="Root">
                        <Canvas x:Name="ButtonIcon"
                                Width="32"
                                Height="32"
                                VerticalAlignment="Center"
                                Effect="{DynamicResource DropShadow}"
                                UseLayoutRounding="True"
                                DockPanel.Dock="Left">
                            <Rectangle Width="14"
                                    Height="2"
                                    Canvas.Left="9"
                                    Canvas.Top="8"
                                    Fill="{DynamicResource IconBackground1}"
                                    RenderTransformOrigin="0,1"
                                    RenderOptions.EdgeMode="Unspecified">
                                    <!--Canvas.Top="2.936"-->
                                <Rectangle.RenderTransform>
                                    <RotateTransform Angle="-15"/>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <Rectangle Width="14"
                                    Height="16"
                                    Canvas.Left="9"
                                    Canvas.Top="11"
                                    Fill="{DynamicResource IconBackground1}"/>
                            
                            <Rectangle Width="2"
                                    Height="12"
                                    Canvas.Left="11"
                                    Canvas.Top="13"
                                    Fill="{DynamicResource IconBackground2}"/>
                            <Rectangle Width="2"
                                    Height="12"
                                    Canvas.Left="15"
                                    Canvas.Top="13"
                                    Fill="{DynamicResource IconBackground2}"/>
                            <Rectangle Width="2"
                                    Height="12"
                                    Canvas.Left="19"
                                    Canvas.Top="13"
                                    Fill="{DynamicResource IconBackground2}"/>
                        </Canvas>
                        <cui:NoSizeDecorator x:Name="ButtonText">
                            <TextBlock Text="{Binding}"
                                    Margin="{DynamicResource IconGap}"
                                    VerticalAlignment="Center"/>
                        </cui:NoSizeDecorator>
                    </DockPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='le136'}" Value="True">
                            <Setter TargetName="ButtonText" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Root" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="Root" Property="ToolTip" Value="{Binding}"/>
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ButtonIcon" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LaunchGameButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderBrush" Value="{DynamicResource LaunchGameButtonBorderBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DockPanel x:Name="Root">
                        <Path x:Name="ButtonIcon"
                            Width="32"
                            Margin="0,-1,0,1"
                            VerticalAlignment="Center"
                            Stretch="None"
                            Fill="{DynamicResource IconBackground1}"
                            Effect="{DynamicResource DropShadow}"
                            UseLayoutRounding="True"
                            DockPanel.Dock="Left"
                            Data="m 9.6648325 2.590412 c 0 0 -9.62048909 7.409238 -1.2259425 14.668821 4.390996 3.797251 15.468624 2.670307 13.055215 -6.336327 4.040175 6.99765 -1.366127 13.131074 -9.615273 11.562283 0 0 11.226997 4.626841 13.316799 -6.272762 1.093128 -5.70123 -5.421723 -14.731074 -12.015114 -8.137755 4.040175 -6.997658 12.055139 -5.382461 14.821031 2.545755 0 0 -1.606432 -12.03608 -12.090856 -8.396063 C 10.426643 4.12834 5.8638286 14.285135 14.870629 16.69845 6.7902777 16.69845 4.1816537 8.949832 9.6648325 2.590412 Z"/>
                        <cui:NoSizeDecorator x:Name="ButtonText">
                            <TextBlock Text="{Binding}"
                                    Margin="{DynamicResource IconGap}"
                                    VerticalAlignment="Center"/>
                        </cui:NoSizeDecorator>
                    </DockPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='le136'}" Value="True">
                            <Setter TargetName="ButtonText" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Root" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="Root" Property="ToolTip" Value="{Binding}"/>
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ButtonIcon" Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModalDialogZoneStyle" TargetType="{x:Type cui:AnimatableContentControl}" BasedOn="{StaticResource {x:Type cui:AnimatableContentControl}}">
        <Setter Property="cui:AttachedProperties.CornerCurves" Value="False,False,True,True"/>
        <Style.Triggers>
            <!--TODO: Restore this-->
            <!--DataTrigger Binding="{Binding FallbackValue=True, Path=HasCustomWindowDecorations, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ManagerContent}}}" Value="False">
                <Setter Property="cui:AttachedProperties.CornerCurves" Value="False"/>
                <Setter Property="Margin" Value="0,-31,0,0"/-->
            <!--Setter TargetName="RootBorder" Property="CornerRadius" Value="0"/>
				<Setter TargetName="RootBorder" Property="BorderThickness" Value="0"/>
				<Setter Property="Margin" Value="0"/-->
            <!--/DataTrigger-->
        </Style.Triggers>
    </Style>

    <Style x:Key="hBase">
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
        <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
    </Style>

    <Style x:Key="h1" BasedOn="{StaticResource hBase}">
        <Setter Property="TextElement.FontSize" Value="24"/>
        <Setter Property="TextElement.FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="h2" BasedOn="{StaticResource hBase}">
        <Setter Property="TextElement.FontSize" Value="16"/>
        <Setter Property="TextElement.FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="h3" BasedOn="{StaticResource hBase}">
        <Setter Property="TextElement.FontSize" Value="12"/>
        <Setter Property="TextElement.FontWeight" Value="Bold"/>
        <Setter Property="TextBlock.TextAlignment" Value="Left"/>
    </Style>

    <Style x:Name="ModConfiguratorComponentsListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <cui:FloorPanel>
                        <cui:FloorPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
                            <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Visible" />
                        </cui:FloorPanel>
                    </cui:FloorPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModConfiguratorComponentsListStyle" TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="MinWidth" Value="300"/>
        <!--Setter Property="Margin" Value="0,0,-14,0"/>
		<Setter Property="Panel.ZIndex" Value="999"/-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="{TemplateBinding DockPanel.Dock}"
						CornerRadius="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}">
                        <ScrollViewer cui:AttachedProperties.CornerCurves="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <cui:FloorPanel>
                                <ItemsPresenter/>
                                <!--Rectangle x:Name="RightShadow" HorizontalAlignment="Right" Width="7" IsHitTestVisible="False">
									<Rectangle.Fill>
										<LinearGradientBrush Opacity="0.5" StartPoint="1,0" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
									</Rectangle.Fill>
								</Rectangle-->
                            </cui:FloorPanel>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModConfiguratorModNameTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource h2}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding HasLogo}" Value="True">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="InitialModConfiguratorZoneStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <cui:FloorPanel>
                        <cui:FloorPanel Margin="0,50">
                            <Rectangle VerticalAlignment="Top" Height="18" IsHitTestVisible="False">
                                <Rectangle.Fill>
                                    <LinearGradientBrush Opacity="0.75" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShadowGradientStops}"/>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Rectangle VerticalAlignment="Bottom" Height="9" IsHitTestVisible="False">
                                <Rectangle.Fill>
                                    <LinearGradientBrush Opacity="0.625" StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </cui:FloorPanel>
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </cui:FloorPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ModConfiguratorZoneStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource InitialModConfiguratorZoneStyle}">
        <Setter Property="Margin" Value="0,-30,0,0"/>
    </Style>

    <Style x:Key="ModConfiguratorHeaderZoneStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!--Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0.75" EndPoint="0,1">
					<LinearGradientBrush.GradientStops>
						<GradientStop Offset="0" Color="#10000000"/>
						<GradientStop Offset="1" Color="#40000000"/>
					</LinearGradientBrush.GradientStops>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<Border Background="{TemplateBinding Background}" CornerRadius="3,3,0,0">
						<ContentPresenter Content="{TemplateBinding Content}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="Top" CornerRadius="3,3,0,0">
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomInstallerFooterZoneStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Height" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="Bottom"
					CornerRadius="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='0,0,3,3;0,0,0,0'}">
                        <ContentPresenter Content="{TemplateBinding Content}" Margin="5"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style x:Key="AutoCompleteComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <DockPanel>
                        <ToggleButton x:Name="ToggleButton" Focusable="False" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Right" Width="18" VerticalAlignment="Stretch">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="cui:AttachedProperties.CornerCurves" Value="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Margin" Value="0"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <cui:FloorPanel>
                                                    <Border x:Name="IdleBackground" CornerRadius="0,3,3,0" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border x:Name="IdleInnerBackground" CornerRadius="0,2,2,0" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                                                    </Border>
                                                    <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                    </Border>
                                                    <cui:FloorPanel>
                                                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" Margin="0"/>
                                                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0" Fill="{TemplateBinding Foreground}" DockPanel.Dock="Right" RenderTransformOrigin="0.5,0.5">
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="0"/>
                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </cui:FloorPanel>
                                                </cui:FloorPanel>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="180" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground"
															 Storyboard.TargetProperty="Opacity" To="1"
															 Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground"
															 Storyboard.TargetProperty="Opacity" To="0"
															 Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Border x:Name="DropDownBorder" BorderThickness="1" UseLayoutRounding="True" Effect="{DynamicResource SecondaryDropShadow}" Margin="4,3,4,5">
                                <!-Border.Effect>
										<DropShadowEffect Color="Black" Direction="270" ShadowDepth="10" BlurRadius="20" Opacity="0.5"/>
									</Border.Effect->
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Border.Background>
                                <cui:FloorPanel x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <ScrollViewer Margin="3,3,3,0" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </cui:FloorPanel>
                            </Border>
                        </Popup>
                        <cui:FloorPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                            <!-Grid Margin="{Binding Padding, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}, Converter={StaticResource ThicknessInvertFilterConverter}, ConverterParameter=ltrb}" Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ComboBox}}}" VerticalAlignment="Stretch"->
                            <TextBox x:Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" autocomp:AutoCompleteBehavior.AutoCompleteItemsSource="{TemplateBinding ItemsSource}">
                                <cui:AttachedProperties.CornerCurves>
                                    <cui:CornerCurves TopLeft="True" TopRight="False" BottomRight="False" BottomLeft="True"/>
                                </cui:AttachedProperties.CornerCurves>
                            </TextBox>
                            <!-/Grid->
                        </cui:FloorPanel>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
                <!-ControlTemplate TargetType="{x:Type ComboBox}">
					<cui:FloorPanel>
						<ToggleButton x:Name="ToggleButton" Focusable="False" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}">
							<ToggleButton.Style>
								<Style TargetType="{x:Type ToggleButton}">
									<Setter Property="OverridesDefaultStyle" Value="True"/>
									<Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
									<Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
									<Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
									<Setter Property="cui:AttachedProperties.CornerCurves" Value="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource TemplatedParent}}"/>
									<Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
									<Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
									<Setter Property="Padding" Value="0"/>
									<Setter Property="Margin" Value="0"/>
									<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
									<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate TargetType="{x:Type ToggleButton}">
												<cui:FloorPanel>
													<Border x:Name="IdleBackground" CornerRadius="3" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
														<Border.Background>
															<LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
														</Border.Background>
														<Border x:Name="IdleInnerBackground" CornerRadius="2" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
													</Border>
													<Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
														<Border.Background>
															<LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
														</Border.Background>
														<Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
															<Border.Background>
																<LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
															</Border.Background>
														</Border>
													</Border>
													<Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
														<Border.Background>
															<LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
														</Border.Background>
														<Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
															<Border.Background>
																<LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
															</Border.Background>
														</Border>
													</Border>
													<Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
														<Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
													</Border>
													<DockPanel Margin="{Binding Padding, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ComboBox}}}">
														<Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0" Fill="{TemplateBinding Foreground}" Margin="5,0,0,0" DockPanel.Dock="Right" RenderTransformOrigin="0.5,0.5">
															<Path.RenderTransform>
																<RotateTransform Angle="0"/>
															</Path.RenderTransform>
														</Path>
														<ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" Margin="0"/>
													</DockPanel>
												</Grid>
												<ControlTemplate.Triggers>
													<Trigger Property="IsMouseOver" Value="True">
														<Trigger.EnterActions>
															<BeginStoryboard>
																<Storyboard>
																	<DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
																</Storyboard>
															</BeginStoryboard>
														</Trigger.EnterActions>
														<Trigger.ExitActions>
															<BeginStoryboard>
																<Storyboard>
																	<DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
																</Storyboard>
															</BeginStoryboard>
														</Trigger.ExitActions>
													</Trigger>
													<Trigger Property="IsChecked" Value="True">
														<Trigger.EnterActions>
															<BeginStoryboard>
																<Storyboard>
																	<DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
																	<DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
																	<DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="-180" Duration="0:0:0.125" />
																</Storyboard>
															</BeginStoryboard>
														</Trigger.EnterActions>
														<Trigger.ExitActions>
															<BeginStoryboard>
																<Storyboard>
																	<DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
																	<DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
																	<DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125" />
																</Storyboard>
															</BeginStoryboard>
														</Trigger.ExitActions>
													</Trigger>
													<Trigger Property="IsEnabled" Value="False">
														<Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
														<Trigger.EnterActions>
															<BeginStoryboard>
																<Storyboard>
																	<DoubleAnimation Storyboard.TargetName="DisabledBackground"
														 Storyboard.TargetProperty="Opacity" To="1"
														 Duration="0:0:0.125" />
																</Storyboard>
															</BeginStoryboard>
														</Trigger.EnterActions>
														<Trigger.ExitActions>
															<BeginStoryboard>
																<Storyboard>
																	<DoubleAnimation Storyboard.TargetName="DisabledBackground"
														 Storyboard.TargetProperty="Opacity" To="0"
														 Duration="0:0:0.125" />
																</Storyboard>
															</BeginStoryboard>
														</Trigger.ExitActions>
													</Trigger>
												</ControlTemplate.Triggers>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
								</Style>
							</ToggleButton.Style>
							<Grid VerticalAlignment="Stretch">
								<ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Left"/>
								<Grid Margin="{Binding Padding, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}, Converter={StaticResource ThicknessInvertFilterConverter}, ConverterParameter=ltrb}" Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ComboBox}}}" VerticalAlignment="Stretch">
									<TextBox x:Name="PART_EditableTextBox" Margin="0,0,17,0" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" autocomp:AutoCompleteBehavior.AutoCompleteItemsSource="{TemplateBinding ItemsSource}">
										<cui:AttachedProperties.CornerCurves>
											<cui:CornerCurves TopLeft="True" TopRight="False" BottomRight="False" BottomLeft="True"/>
										</cui:AttachedProperties.CornerCurves>
									</TextBox>
								</Grid>
							</Grid>
						</ToggleButton>
						<Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
							<Border x:Name="DropDownBorder" BorderThickness="1" UseLayoutRounding="True" Effect="{DynamicResource SecondaryDropShadow}" Margin="4,3,4,5">
								<Border.Background>
									<LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
								</Border.Background>
								<Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
									<ScrollViewer Padding="3,3,3,0" SnapsToDevicePixels="True">
										<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
									</ScrollViewer>
								</Grid>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEditable" Value="False">
							<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
						<Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
							<Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
							<Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate->
            </Setter.Value>
        </Setter>
    </Style-->

    <Style x:Key="CreditsStyle" TargetType="{x:Type ItemsControl}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="-10,0"/>
        <Setter Property="Padding" Value="0,0,0,-5"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <ItemsPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <cui:StackPanelEx Spacing="-5" IsItemsHost="true"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CreditsButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Vertical">
                        <cui:FloorPanel>
                            <Border x:Name="HoverBackground" CornerRadius="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                </Border.Background>
                                <Border x:Name="HoverInnerBackground" CornerRadius="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                    </Border.Background>
                                </Border>
                            </Border>
                            <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=HoverBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                </Border.Background>
                                <Border CornerRadius="{Binding CornerRadius, ElementName=HoverInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                    </Border.Background>
                                </Border>
                            </Border>
                            <ContentPresenter Margin="{TemplateBinding Padding}"/>
                        </cui:FloorPanel>
                        <Separator Margin="40,0"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsEnabled" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FolderNotFoundListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ListViewItemStyle}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type core:DetectionFailureGuessFolder}">
                    <StackPanel Orientation="Vertical">
                        <TextBlock x:Name="PathTypeTextBlock" Style="{DynamicResource h2}" HorizontalAlignment="Left" TextAlignment="Left" Text="{DynamicResource FolderNotFoundUnknown}"/>
                        <TextBlock Text="{Binding GuessPath}" TextWrapping="Wrap" HorizontalAlignment="Left" TextAlignment="Left"/>
                    </StackPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding GuessType}" Value="Disk">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource Error!GamePathNotFound!Guess!Disk}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="Origin">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource Error!GamePathNotFound!Guess!Origin}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="OriginPatched">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource Error!GamePathNotFound!Guess!Gog}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="Steam">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource Error!GamePathNotFound!Guess!Unknown}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding GuessType}" Value="SteamPatched">
                            <Setter TargetName="PathTypeTextBlock" Property="Text" Value="{DynamicResource ProbablyGOGGuessText}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style x:Key="LanguagesComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Padding" Value="5" />
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonBackgroundGradientStops}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource ComboBoxForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <cui:FloorPanel>
                        <ToggleButton x:Name="ToggleButton" Focusable="False" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay,  RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Right" Width="18" cui:AttachedProperties.CornerCurves="False,True,True,False">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Padding" Value="0"/>
                                    <Setter Property="Margin" Value="0"/>
                                    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                <cui:FloorPanel>
                                                    <Border x:Name="IdleBackground" CornerRadius="0,3,3,0" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border x:Name="IdleInnerBackground" CornerRadius="0,2,2,0" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                                                    </Border>
                                                    <Border x:Name="HoverBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="PressedBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                                        </Border.Background>
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                                            <Border.Background>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                                            </Border.Background>
                                                        </Border>
                                                    </Border>
                                                    <Border x:Name="DisabledBackground" CornerRadius="{Binding CornerRadius, ElementName=IdleBackground}" Margin="0" Padding="0" Background="{DynamicResource ButtonDisabledBackgroundBrush}" BorderBrush="{DynamicResource ButtonDisabledBorderBrush}" BorderThickness="1" Opacity="0">
                                                        <Border CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0" Background="{DynamicResource ButtonDisabledSecondaryBackgroundBrush}"/>
                                                    </Border>
                                                    <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                                        <Path.RenderTransform>
                                                            <RotateTransform Angle="0"/>
                                                        </Path.RenderTransform>
                                                    </Path>
                                                </cui:FloorPanel>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="-180" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="IdleBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                                                    <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForegroundBrush}"/>
                                                        <Trigger.EnterActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground"
														 Storyboard.TargetProperty="Opacity" To="1"
														 Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.EnterActions>
                                                        <Trigger.ExitActions>
                                                            <BeginStoryboard>
                                                                <Storyboard>
                                                                    <DoubleAnimation Storyboard.TargetName="DisabledBackground"
														 Storyboard.TargetProperty="Opacity" To="0"
														 Duration="0:0:0.125" />
                                                                </Storyboard>
                                                            </BeginStoryboard>
                                                        </Trigger.ExitActions>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <cui:FloorPanel VerticalAlignment="Stretch" Visibility="Collapsed" IsHitTestVisible="False">
                            <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Left"/>
                            <cui:FloorPanel VerticalAlignment="Stretch">
                                <TextBox x:Name="PART_EditableTextBox" Margin="0,0,17,0" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" autocomp:AutoCompleteBehavior.AutoCompleteItemsSource="{TemplateBinding ItemsSource}">
                                    <cui:AttachedProperties.CornerCurves>
                                        <cui:CornerCurves TopLeft="True" TopRight="False" BottomRight="False" BottomLeft="True"/>
                                    </cui:AttachedProperties.CornerCurves>
                                </TextBox>
                            </cui:FloorPanel>
                        </cui:FloorPanel>
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Border x:Name="DropDownBorder" BorderThickness="1" UseLayoutRounding="True" Effect="{DynamicResource SecondaryDropShadow}" Margin="4,3,4,5">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                                </Border.Background>
                                <cui:FloorPanel x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <ScrollViewer Padding="3,3,3,0" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </cui:FloorPanel>
                            </Border>
                        </Popup>
                    </cui:FloorPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEditable" Value="False">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style-->

    <Style x:Key="WithSubControls" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter ContentSource="Header" DockPanel.Dock="Top"/>
                        <ContentPresenter ContentSource="Content" Margin="{DynamicResource SubControlsInsetMargin}"/>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type cui:Zone}" TargetType="{x:Type cui:Zone}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cui:Zone}">
                    <!--Border Background="#FF00FF"-->
                        <ContentPresenter/>
                    <!--/Border-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
