<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:cui="clr-namespace:SporeMods.CommonUI"
			xmlns:core="clr-namespace:SporeMods.Core;assembly=SporeMods.Core"
			xmlns:mods="clr-namespace:SporeMods.Core.Mods;assembly=SporeMods.Core"
			xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
			xmlns:shale="clr-namespace:SporeMods.CommonUI.Themes.Shale"
			xmlns:autocomp="clr-namespace:WPFTextBoxAutoComplete;assembly=WPFTextBoxAutoComplete"
			xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Shale.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SporeMods.CommonUI;component/Themes/Shale/Converters.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <cui:IconToImageBrushConverter x:Key="IconToImageBrushConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <cui:DoubleComparisonConverter x:Key="DoubleComparisonConverter"/>
    <cui:BorderPresenceToThicknessConverter x:Key="BorderPresenceToThicknessConverter"/>
    <cui:CornerCurvesToCornerRadiusConverter x:Key="CornerCurvesToCornerRadiusConverter"/>
    <cui:IsAllTrueConverter x:Key="IsAllTrueConverter"/>


    <!--### X button shown in some modals ###-->
    <Style x:Key="DismissModalButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource GlyphButtonStyle}">
        <Setter Property="Width" Value="45"/>
        <Setter Property="Foreground" Value="{DynamicResource WindowForegroundBrush}"/>
        <Setter Property="Content" Value="{DynamicResource AnimatableContentControlCloseButtonIcon}"/>
    </Style>

    <!--### "Drop here to do whatever" box used when installing mods or specifying game install paths ###-->
    <Style x:Key="DropHereZoneStyle" TargetType="{x:Type cui:Zone}">
        <Setter Property="Padding" Value="20"/>
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Background" Value="#01000000"/>
        <Setter Property="ClipToBounds" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type cui:Zone}">
                    <!--Grid Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="GridSize" Width="0"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="{Binding Width, ElementName=GridSize}"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="{Binding Width, ElementName=GridSize}"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="{Binding Width, ElementName=GridSize}"/>
                            </Grid.RowDefinitions>

                            <Border Opacity="0.25" Background="{DynamicResource TopDownMaskBrush}" CornerRadius="6,0,0,0" Grid.Column="0" Grid.Row="0" OpacityMask="{DynamicResource FromLeftMaskBrush}" Width="12" HorizontalAlignment="Left"/>
                            <Border Opacity="0.25" Background="{DynamicResource FromLeftMaskBrush}" CornerRadius="6,0,0,0" Grid.Column="0" Grid.Row="0" OpacityMask="{DynamicResource TopDownMaskBrush}" Height="16" VerticalAlignment="Top"/>

                            <Border Opacity="0.25" Background="{DynamicResource FromRightMaskBrush}" CornerRadius="0,6,0,0" Grid.Column="2" Grid.Row="0" OpacityMask="{DynamicResource TopDownMaskBrush}" Height="16" VerticalAlignment="Top"/>
                            <Border Opacity="0.25" Background="{DynamicResource TopDownMaskBrush}" CornerRadius="0,6,0,0" Grid.Column="2" Grid.Row="0" OpacityMask="{DynamicResource FromRightMaskBrush}" Width="12" HorizontalAlignment="Right"/>

                            <Border Opacity="0.25" Background="{DynamicResource BottomUpMaskBrush}" CornerRadius="0,0,6,0" Grid.Column="2" Grid.Row="2" OpacityMask="{DynamicResource FromRightMaskBrush}" Width="12" HorizontalAlignment="Right"/>
                            <Border Opacity="0.25" Background="{DynamicResource FromRightMaskBrush}" CornerRadius="0,0,6,0" Grid.Column="2" Grid.Row="2" OpacityMask="{DynamicResource BottomUpMaskBrush}" Height="8" VerticalAlignment="Bottom"/>

                            <Border Opacity="0.25" Background="{DynamicResource FromLeftMaskBrush}" CornerRadius="0,0,0,6" Grid.Column="0" Grid.Row="2" OpacityMask="{DynamicResource BottomUpMaskBrush}" Height="8" VerticalAlignment="Bottom"/>
                            <Border Opacity="0.25" Background="{DynamicResource BottomUpMaskBrush}" CornerRadius="0,0,0,6" Grid.Column="0" Grid.Row="2" OpacityMask="{DynamicResource FromLeftMaskBrush}" Width="12" HorizontalAlignment="Left"/>
                        </Grid>
                        <ContentPresenter x:Name="PART_ContentPresenter"
                                          Content="{TemplateBinding Content}"
                                          TextElement.Foreground="#FF7F7F7F"
                                          Style="{DynamicResource h1}"
                                          Margin="{TemplateBinding Padding}"/>
                        <TextBox x:Name="Edge"
                                 Text=""
                                 IsHitTestVisible="False"/>
                        <!-IsEnabled="False"
                                 IsReadOnly="True"
                                 IsReadOnlyCaretVisible="False"->
                        <TextBlock x:Name="NoDragDrop"
                                   Text="Drag-and-drop unavailable because haha UAC quirks go brrr (PLACEHOLDER) (NOT LOCALIZED)"
                                   Margin="{TemplateBinding Padding}"
                                   Style="{DynamicResource h1}"
                                   Visibility="Collapsed"/>
                    </Grid-->
                    <cui:FloorPanel>
                        <Rectangle x:Name="NoTransparencyAllowed"
                                   Margin="-5,-48,-5,-68">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,0.75" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <DockPanel>
                            <Separator x:Name="Shading"
                                   cui:AttachedProperties.CastDirection="Down"
                                   DockPanel.Dock="Top"
                                       Visibility="Collapsed"/>
                            <Separator cui:AttachedProperties.CastDirection="Up"
                                   DockPanel.Dock="Bottom"
                                   Visibility="{Binding Visibility, ElementName=Shading}"/>
                            <ContentPresenter x:Name="PART_ContentPresenter"
                                            Content="{TemplateBinding Content}"
                                            TextElement.Foreground="#FF7F7F7F"
                                            Style="{DynamicResource h1}"
                                            Margin="{TemplateBinding Padding}"/>
                                <!--TextBlock x:Name="NoDragDrop"
                                   Text="Drag-and-drop unavailable because haha UAC quirks go brrr (PLACEHOLDER) (NOT LOCALIZED)"
                                   Margin="{TemplateBinding Padding}"
                                   Style="{DynamicResource h1}"
                                   Visibility="Collapsed"/-->
                        </DockPanel>
                    </cui:FloorPanel>
                    <ControlTemplate.Triggers>
                        <!--No drag servant, UAC interference present-->
                        <Trigger Property="Tag" Value="NoDrop">
                        </Trigger>
                        <!--Drag servant running-->
                        <Trigger Property="Tag" Value="HasDragServant">
                        </Trigger>
                        <!--In drag servant-->
                        <Trigger Property="Tag" Value="{x:Null}">
                            <Setter TargetName="Shading" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--### Footer for various modal things, typically houses responses/actions (OK, Apply, Cancel, etc.) ###-->
    <!--TODO: Rename to not sound like it's specific to configurators-->
    <Style x:Key="CustomInstallerFooterZoneStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Height" Value="50"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="Bottom"
					CornerRadius="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='0,0,3,3;0,0,0,0'}">
                        <ContentPresenter Content="{TemplateBinding Content}" Margin="5"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--### Left pane in mod configurators ###-->
    <Style x:Key="ModConfiguratorComponentsListStyle" TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="MinWidth" Value="300"/>
        <!--Setter Property="Margin" Value="0,0,-14,0"/>
		<Setter Property="Panel.ZIndex" Value="999"/-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="{TemplateBinding DockPanel.Dock}"
						CornerRadius="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}">
                        <ScrollViewer cui:AttachedProperties.CornerCurves="{Binding Path=(cui:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}}">
                            <cui:FloorPanel>
                                <ItemsPresenter/>
                                <!--Rectangle x:Name="RightShadow" HorizontalAlignment="Right" Width="7" IsHitTestVisible="False">
									<Rectangle.Fill>
										<LinearGradientBrush Opacity="0.5" StartPoint="1,0" EndPoint="0,0" GradientStops="{DynamicResource ShadowGradientStops}"/>
									</Rectangle.Fill>
								</Rectangle-->
                            </cui:FloorPanel>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--### Header for mod configurators ###-->
    <Style x:Key="ModConfiguratorHeaderZoneStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!--Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0.75" EndPoint="0,1">
					<LinearGradientBrush.GradientStops>
						<GradientStop Offset="0" Color="#10000000"/>
						<GradientStop Offset="1" Color="#40000000"/>
					</LinearGradientBrush.GradientStops>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<Border Background="{TemplateBinding Background}" CornerRadius="3,3,0,0">
						<ContentPresenter Content="{TemplateBinding Content}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border Style="{DynamicResource HorizontalBarBorderStyle}" DockPanel.Dock="Top" CornerRadius="3,3,0,0">
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--### Style for container for modal/popup things ###-->
    <Style x:Key="ModalDialogZoneStyle" TargetType="{x:Type cui:AnimatableContentControl}" BasedOn="{StaticResource {x:Type cui:AnimatableContentControl}}">
        <Setter Property="cui:AttachedProperties.CornerCurves" Value="False,False,True,True"/>
        <Style.Triggers>
            <!--TODO: Restore this-->
            <!--DataTrigger Binding="{Binding FallbackValue=True, Path=HasCustomWindowDecorations, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ManagerContent}}}" Value="False">
                <Setter Property="cui:AttachedProperties.CornerCurves" Value="False"/>
                <Setter Property="Margin" Value="0,-31,0,0"/-->
            <!--Setter TargetName="RootBorder" Property="CornerRadius" Value="0"/>
				<Setter TargetName="RootBorder" Property="BorderThickness" Value="0"/>
				<Setter Property="Margin" Value="0"/-->
            <!--/DataTrigger-->
        </Style.Triggers>
    </Style>

    <!--### GroupBox style for radio groups in mod configurators ###-->
    <Style x:Key="ConfiguratorComponentGroupStyle" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <StackPanel Orientation="Vertical"
                                    Margin="{TemplateBinding Padding}">
                        <Separator cui:AttachedProperties.CastDirection="Up"/>
                        <ContentPresenter x:Name="HeaderPresenter"
                                        ContentSource="Header"
                                        RecognizesAccessKey="True"
                                        TextElement.Foreground="{TemplateBinding Foreground}"
                                        HorizontalAlignment="Left"
                                        TextBlock.FontSize="16"
                                        TextBlock.FontWeight="Bold"
                                        VerticalAlignment="Center"/>
                        <Rectangle Height="{DynamicResource SettingsControlsVerticalSpacing}"
                            Visibility="Hidden"/>
                        <ContentPresenter x:Name="BodyPresenter"/>
                        <Separator cui:AttachedProperties.CastDirection="Down"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter TargetName="HeaderPresenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
